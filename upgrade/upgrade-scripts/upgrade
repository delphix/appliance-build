#!/bin/bash
#
# Copyright 2018 Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

. "${BASH_SOURCE%/*}/common.sh"

IMAGE_PATH=$(get_image_path)
[[ -n "$IMAGE_PATH" ]] || die "failed to determine image path"

IMAGE_VERSION=$(get_image_version)
[[ -n "$IMAGE_VERSION" ]] || die "failed to determine image version"

#
# This variable is used to determine if a "dry run" of the upgrade
# should be performed, as opposed to an actual upgrade of the system.
# When performing a "dry run", the running system will not be modified.
# The default value can be overridden by setting this environment
# variable to "true", and/or passing the "-n" option to this script (see
# the script's usage). If both, the environment variable and the "-n"
# option are specified, the "-n" option takes precedence.
#
DLPX_UPGRADE_DRY_RUN=${DLPX_UPGRADE_DRY_RUN:-"false"}

#
# This variable is used to determine if the application verification
# checks should be run as part of the upgrade. The default value can be
# overridden by setting this environment variable to "true", and/or
# passing the "-v" option to this script (see the scripts usage). If
# both, the environment variable and the "-v" option are specified, the
# "-v" option takes precedence.
#
DLPX_UPGRADE_SKIP_VERIFY=${DLPX_UPGRADE_SKIP_VERIFY:-"false"}

function usage() {
	echo "$(basename "$0"): $*" >&2

	PREFIX_STRING="Usage: $(basename "$0")"
	PREFIX_NCHARS=$(echo -n "$PREFIX_STRING" | wc -c)
	PREFIX_SPACES=$(printf "%.s " $(seq "$PREFIX_NCHARS"))

	echo "$PREFIX_STRING [-n] [-v] deferred"
	echo "$PREFIX_SPACES [-n] [-v] full"
	echo "$PREFIX_SPACES rollback"
	echo "$PREFIX_SPACES finalize"

	exit 2
}

function cleanup_container() {
	#
	# If the CONTAINER variable is empty, this means container
	# creation failed. In that case, the container creation process
	# will have already cleaned up after itself, and there's no
	# further cleanup for us to do here.
	#
	[[ -z "$CONTAINER" ]] && return

	"$IMAGE_PATH/upgrade-container" stop "$CONTAINER" ||
		warn "failed to stop '$CONTAINER'"

	"$IMAGE_PATH/upgrade-container" destroy "$CONTAINER" ||
		warn "failed to destroy '$CONTAINER'"
}

function cleanup_in_place_upgrade() {
	#
	# Capture the exit code here, and use that to determine if
	# upgrade verification was successful or not.
	#
	local rc="$?"

	if [[ "$rc" == "0" ]] ||
		[[ "$rc" != "0" && "$DLPX_DEBUG" != "true" ]]; then
		#
		# On success, or on failure when DLPX_DEBUG is not true,
		# we clean up the container previously created. When
		# DLPX_DEBUG is true, we leave the container around on
		# failure to aid debugging efforts.
		#
		cleanup_container
	fi

	return "$rc"
}

function upgrade_in_place() {
	trap cleanup_in_place_upgrade EXIT

	case "$UPGRADE_TYPE" in
	DEFERRED | FULL) ;;
	*)
		die "upgrade type ('$UPGRADE_TYPE') is not supported for " \
			"in-place upgrade."
		;;
	esac

	CONTAINER=$("$IMAGE_PATH/upgrade-container" create in-place)
	[[ -n "$CONTAINER" ]] || die "failed to create container"

	"$IMAGE_PATH/upgrade-container" start "$CONTAINER" ||
		die "failed to start '$CONTAINER'"

	"$IMAGE_PATH/upgrade-container" upgrade "$CONTAINER" ||
		die "Failed to do in-place upgrade on '$CONTAINER'"

	if [[ "$DLPX_UPGRADE_SKIP_VERIFY" != "true" ]]; then
		"$IMAGE_PATH/upgrade-container" run "$CONTAINER" \
			"$IMAGE_PATH/verify-jar" "$@" ||
			die "'$IMAGE_PATH/verify-jar' '$*' failed in '$CONTAINER'"
		"$IMAGE_PATH/upgrade-container" run "$CONTAINER" \
			"$IMAGE_PATH/verify-stack" "$@" ||
			die "'$IMAGE_PATH/verify-stack' '$*' failed in '$CONTAINER'"
	fi

	#
	# When the "dry-run" option is set, we don't want to modify the
	# running system, so we must stop here.
	#
	[[ "$DLPX_UPGRADE_DRY_RUN" == "true" ]] && return

	set_upgrade_property "UPGRADE_TYPE" "$UPGRADE_TYPE" ||
		die "failed to set upgrade property 'UPGRADE_TYPE' to '$UPGRADE_TYPE'"

	set_upgrade_property "UPGRADE_BASE_CONTAINER" \
		"$(get_mounted_rootfs_container_name)" ||
		die "failed to set upgrade property 'UPGRADE_BASE_CONTAINER'"

	set_upgrade_property "UPGRADE_BASE_VERSION" "$(get_current_version)" ||
		die "failed to set upgrade property 'UPGRADE_BASE_VERSION'"

	#
	# Since we'll automatically trigger a reboot after successfully
	# executing the upgrade below, we won't run the clean up logic
	# below on success. Thus, we need to proactively run the clean
	# up logic now, in order for the clean up to occur at all.
	#
	cleanup_in_place_upgrade
	trap - EXIT

	ROOTFS_CONTAINER="$(get_mounted_rootfs_container_name)"
	[[ -n "$ROOTFS_CONTAINER" ]] ||
		die "unable to determine currently mounted rootfs container"

	[[ -f "/var/lib/delphix-appliance/platform" ]] ||
		die "could not determine platform; file does not exist"

	"$IMAGE_PATH/execute" \
		-p "$(cat /var/lib/delphix-appliance/platform)" ||
		die "'$IMAGE_PATH/execute' failed in running appliance."

	#
	# We use a seperate ZFS dataset for GRUB, and this dataset is
	# generally not mounted when we update pacakges on the system.
	# Thus, when a new kernel package is installed, via the call to
	# "execute" above, the GRUB configuration will not be modified
	# to use that new kernel.
	#
	# In order for the system to use the new kernel after a reboot,
	# we must regenerate the GRUB configuration after the new kernel
	# has been installed. The "rootfs-container set-bootfs" command
	# will do just that; it knows how to mount our GRUB specific
	# dataset, and how properly update the GRUB configuration.
	#
	"$IMAGE_PATH/rootfs-container" set-bootfs "$ROOTFS_CONTAINER" ||
		die "failed to set-bootfs '$ROOTFS_CONTAINER'"

	if [[ "$UPGRADE_TYPE" == "FULL" ]]; then
		systemctl reboot || die "'systemctl reboot' failed"
	else
		systemctl reload delphix-platform ||
			die "'systemctl reload delphix-platform' failed"

		systemctl restart delphix-platform ||
			die "'systemctl restart delphix-platform' failed"
	fi
}

function cleanup_not_in_place_upgrade() {
	#
	# Capture the exit code here, and use that to determine if
	# upgrade verification was successful or not.
	#
	local rc="$?"

	if [[ "$rc" == "0" && "$DLPX_UPGRADE_DRY_RUN" == "true" ]] ||
		[[ "$rc" != "0" && "$DLPX_DEBUG" != "true" ]]; then
		#
		# On failure and when DLPX_DEBUG is not true, we clean
		# up the container previously created.
		#
		# Unlike in-place upgrades, the container is not cleaned
		# up on success; instead the container will have been
		# already stopped and converted to be used as the root
		# filesystem for the appliance after the next reboot.
		#
		cleanup_container
	fi

	return "$rc"
}

function upgrade_not_in_place() {
	trap cleanup_not_in_place_upgrade EXIT

	case "$UPGRADE_TYPE" in
	FULL) ;;
	*)
		die "upgrade type ('$UPGRADE_TYPE') is not supported for " \
			"not-in-place upgrade."
		;;
	esac

	#
	# We query the mounted rootfs container name here, so that if we
	# can't get this information for whatever reason, we can easily
	# handle the error and abort; rather than having to handle this
	# error later, when it might require more work to handle it.
	#
	MOUNTED_CONTAINER="$(get_mounted_rootfs_container_name)"
	[[ -n "$MOUNTED_CONTAINER" ]] ||
		die "failed to determine mounted rootfs container"

	CONTAINER=$("$IMAGE_PATH/upgrade-container" create not-in-place)
	[[ -n "$CONTAINER" ]] || die "failed to create upgrade container"

	"$IMAGE_PATH/upgrade-container" start "$CONTAINER" ||
		die "failed to start upgrade '$CONTAINER'"

	"$IMAGE_PATH/upgrade-container" upgrade "$CONTAINER" ||
		die "Failed to upgrade do not-in-place upgrade on '$CONTAINER'"

	if [[ "$DLPX_UPGRADE_SKIP_VERIFY" != "true" ]]; then
		"$IMAGE_PATH/upgrade-container" run "$CONTAINER" \
			"$IMAGE_PATH/verify-jar" "$@" ||
			die "'$IMAGE_PATH/verify-jar' '$*' failed in '$CONTAINER'"
		if is_upgrade_in_place_allowed; then
			"$IMAGE_PATH/upgrade-container" run "$CONTAINER" \
				"$IMAGE_PATH/verify-stack" "$@" ||
				die "'$IMAGE_PATH/verify-stack' '$*' failed in '$CONTAINER'"
		fi
	fi

	"$IMAGE_PATH/upgrade-container" stop "$CONTAINER" ||
		die "failed to stop '$CONTAINER'"

	#
	# When the "dry-run" option is set, we don't want to modify the
	# running system, so we must stop here.
	#
	[[ "$DLPX_UPGRADE_DRY_RUN" == "true" ]] && return

	#
	# After this point, we no longer want to execute the normal cleanup
	# handler on any failure. The following command will convert the
	# container to be used as the next boot/root filesystem, and thus
	# the "stop" and "destroy" container logic will no longer work. So,
	# if either the "convert-to-rootfs" or "set-bootfs" logic fails,
	# we'll need to manually rectify the situation.
	#
	trap - EXIT

	set_upgrade_property "UPGRADE_TYPE" "FULL" ||
		die "failed to set upgrade property 'UPGRADE_TYPE'"

	set_upgrade_property "UPGRADE_BASE_CONTAINER" \
		"$(get_mounted_rootfs_container_name)" ||
		die "failed to set upgrade property 'UPGRADE_BASE_CONTAINER'"

	set_upgrade_property "UPGRADE_BASE_VERSION" "$(get_current_version)" ||
		die "failed to set upgrade property 'UPGRADE_BASE_VERSION'"

	"$IMAGE_PATH/upgrade-container" convert-to-rootfs "$CONTAINER" ||
		die "failed to convert-to-rootfs '$CONTAINER'"

	"$IMAGE_PATH/rootfs-container" set-bootfs "$CONTAINER" ||
		die "failed to set-bootfs '$CONTAINER'"

	systemctl reboot || die "'systemctl reboot' failed"
}

function rollback() {
	[[ "$DLPX_UPGRADE_DRY_RUN" == "true" ]] &&
		die "unable to perform a 'dry-run' of rollback"

	source_upgrade_properties

	[[ -n "$UPGRADE_TYPE" ]] ||
		die "variable UPGRADE_TYPE is not set; is upgrade in progress?"

	[[ -n "$UPGRADE_BASE_CONTAINER" ]] ||
		die "variable UPGRADE_BASE_CONTAINER is not set"
	[[ -n "$UPGRADE_BASE_VERSION" ]] ||
		die "variable UPGRADE_BASE_VERSION is not set"

	case "$UPGRADE_TYPE" in
	FULL)
		# rollback is only supported for "FULL" upgrades
		;;
	*)
		die "rollback is not supported for upgrade type: '$UPGRADE_TYPE'"
		;;
	esac

	ROLLBACK_BASE_CONTAINER="$(get_mounted_rootfs_container_name)"
	[[ -n "$ROLLBACK_BASE_CONTAINER" ]] ||
		die "unable to determine mounted rootfs container name"
	ROLLBACK_BASE_VERSION="$(get_current_version)"
	[[ -n "$ROLLBACK_BASE_VERSION" ]] ||
		die "unable to determine current appliance version"

	set_upgrade_property "ROLLBACK_BASE_CONTAINER" "$ROLLBACK_BASE_CONTAINER" ||
		die "failed setting 'ROLLBACK_BASE_CONTAINER' property"
	set_upgrade_property "ROLLBACK_BASE_VERSION" "$ROLLBACK_BASE_VERSION" ||
		die "failed setting 'ROLLBACK_BASE_VERSION' property"

	if [[ "$UPGRADE_BASE_CONTAINER" == "$ROLLBACK_BASE_CONTAINER" ]]; then
		#
		# If UPGRADE_BASE_CONTAINER matches the currently
		# mounted rootfs container, then it means an "in-place"
		# upgrade was performed. Thus, we perform the rollback
		# logic that's specific to an "in-place" upgrade"
		#

		CONTAINER="$("$IMAGE_PATH/upgrade-container" create rollback)"
		[[ -n "$CONTAINER" ]] ||
			die "failed to create 'rollback' upgrade container"

		"$IMAGE_PATH/upgrade-container" convert-to-rootfs "$CONTAINER" ||
			die "failed to convert-to-rootfs '$CONTAINER'"

		"$IMAGE_PATH/rootfs-container" set-bootfs "$CONTAINER" ||
			die "failed to set-bootfs '$CONTAINER'"
	else
		#
		# If the UPGRADE_BASE_CONTAINER variable does not match
		# the currently mounted rootffs container, then it means
		# a "not-in-place" upgrade was performed. Thus, we
		# perform the rollback logic that's specific to a
		# "not-in-place" upgrade.
		#

		"$IMAGE_PATH/rootfs-container" \
			set-bootfs "$UPGRADE_BASE_CONTAINER" ||
			die "failed to set-bootfs '$UPGRADE_BASE_CONTAINER'"
	fi

	systemctl reboot || die "'systemctl reboot' failed"
}

function finalize() {
	if [[ "$DLPX_UPGRADE_DRY_RUN" == "true" ]]; then
		#
		# If we're executing a dry-run of the finalize
		# sub-command, we assume that we're running after a
		# dry-run upgrade. Thus, in that case, we only need to
		# remove the upgrade image, as all of the snapshots and
		# datasets for the dry-run upgrade will have already
		# been removed.
		#
		rm -rf "$IMAGE_PATH" ||
			die "failed to remove unpacked upgrade image"
		return
	fi

	source_upgrade_properties

	[[ -n "$UPGRADE_TYPE" ]] ||
		die "variable UPGRADE_TYPE is not set; is upgrade in progress?"

	case "$UPGRADE_TYPE" in
	DEFERRED)
		#
		# Currently, we've only implemented "finalize" for
		# DEFERRED upgrades. This is to avoid adding the logic
		# for "not-in-place" upgrades (DEFERRED is strictly
		# "in-place") and rollback (which is not supported for
		# DEFERRED), until we determine those are required.
		#
		;;
	*)
		die "rollback is not supported for upgrade type: '$UPGRADE_TYPE'"
		;;
	esac

	ROOTFS_DATASET=$(get_mounted_rootfs_container_dataset)
	[[ -n "$ROOTFS_DATASET" ]] ||
		die "unable to determine mounted rootfs container dataset"

	SNAPSHOT_NAME=$(get_dataset_rollback_snapshot_name "$ROOTFS_DATASET")
	[[ -n "$SNAPSHOT_NAME" ]] ||
		die "unable to determine rollback snapshot name"

	zfs destroy -r "$ROOTFS_DATASET@$SNAPSHOT_NAME" ||
		die "failed to destroy rollback snapshots"

	rm -rf "$IMAGE_PATH" || die "failed to remove unpacked upgrade image"

	remove_upgrade_properties
}

[[ "$EUID" -ne 0 ]] && die "must be run as root"

while getopts ':nv' c; do
	case "$c" in
	n)
		DLPX_UPGRADE_DRY_RUN="true"
		;;
	v)
		DLPX_UPGRADE_SKIP_VERIFY="true"
		;;
	*)
		usage "invalid option -- '$c'"
		;;
	esac
done
shift $((OPTIND - 1))

case "$1" in
deferred)
	UPGRADE_TYPE="DEFERRED"
	shift 1
	verify_upgrade_is_allowed
	verify_upgrade_in_place_is_allowed
	upgrade_in_place "$@"
	;;
full)
	UPGRADE_TYPE="FULL"
	shift 1
	verify_upgrade_is_allowed

	#
	# FULL upgrade always perform a reboot but can take on two
	# flavors -- in-place or not-in-place. The flavor of a FULL upgrade
	# is determined by the MINIMUM_REBOOT_OPTIONAL_VERSION. If our
	# upgrade version is not greater than MINIMUM_REBOOT_OPTIONAL_VERSION
	# than the upgrade will be a not-in-place upgrade. If you wish to force
	# a not-in-place upgrade, use the -x option when running unpack-image.
	#
	if is_upgrade_in_place_allowed; then
		upgrade_in_place "$@"
	else
		upgrade_not_in_place "$@"
	fi
	;;
rollback)
	shift 1
	rollback "$@"
	;;
finalize)
	shift 1
	finalize "$@"
	;;
*)
	usage "invalid option -- '$1'"
	;;
esac
