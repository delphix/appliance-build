#!/bin/bash
#
# Copyright 2018 Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

. "${BASH_SOURCE%/*}/common.sh"

INTERFACE_TO_MACADRESS_MAP_FILE_PATH="/etc/interface_to_macaddress_map.out"

IMAGE_PATH=$(get_image_path)
[[ -n "$IMAGE_PATH" ]] || die "failed to determine image path"

set -o pipefail

function usage() {
	echo "$(basename "$0"): $*" >&2
	echo "Usage: $(basename "$0") -p <platform>"
	exit 2
}

function generate_interface_to_mac_address_map() {
	# we always create the map file anew to avoid using any stale versions of the same
  	if [[ -e "$INTERFACE_TO_MACADRESS_MAP_FILE_PATH" ]]; then
    		rm "$INTERFACE_TO_MACADRESS_MAP_FILE_PATH" ||
      		die "Could not delete the existing contents of the mac address map file"
  	fi
  	for i in $(ls -lart /sys/class/net | awk '{print $9}');
  	do
    		interface_name="$i";
    		if [ -e /sys/class/net/"$i"/address ] &&
      			grep -q -v -e "00:00:00:00:00:00" /sys/class/net/$i/address ; then
      			mac_address=$(cat /sys/class/net/"$i"/address | tr -d ":");
      			echo $interface_name $mac_address >> "$INTERFACE_TO_MACADRESS_MAP_FILE_PATH"
    		fi;
  	done
  	[ -s "$INTERFACE_TO_MACADRESS_MAP_FILE_PATH" ] ||
    		die "Failed to generate map from interface names to mac addresses"
}

while getopts ':rlBfsp:' c; do
	case $c in
	r | l | B | f | s) ;; # LX-72: For now, silently ignore these.
	p)
		platform=$OPTARG
		;;
	*) usage "illegal options -- $OPTARG" ;;
	esac
done

[[ -z "$platform" ]] && usage "platform must be specified"

#
# When upgrading the packages on with this script, we want to ensure
# that only a single process is attempting to do this at any given time.
# Thus, we add some locking in case multiple processes call this script
# concurrently; to prevent accidental corruption and/or failures.
#
if [[ "$UPGRADE_EXECUTE_LOCKED" != "true" ]]; then
	exec env UPGRADE_EXECUTE_LOCKED="true" \
		flock -e "/var/run/delphix-upgrade-execute-lock" "$0" "$@"
fi

source_version_information

#
# When a not-in-place upgrade is performed, the rootfs container that's
# created will not initially have any delphix software installed in it.
# As a result, no version properties will be set on the container
# dataset either.
#
# To detect this situation, we check if the "zfs" command is installed.
# If it's installed, we query the current version. If it's not
# installed, we assume we're running the initial "execute" for a
# not-in-place container and don't set $CURRENT_VERSION.
#
if type zfs &>/dev/null; then
	CURRENT_VERSION=$(get_current_version) || die "failed to get version"
fi

if [[ -n "$CURRENT_VERSION" ]]; then
	verify_upgrade_is_allowed

	ROOTFS_CONTAINER="$(get_mounted_rootfs_container_dataset)"
	[[ -n "$ROOTFS_CONTAINER" ]] ||
		die "unable to determine currently mounted rootfs container"

	#
	# It's possible for this script to be run multiple times,
	# and each time this script is run, we want to keep a
	# unique snapshot for each invocation.
	#
	# shellcheck disable=SC2002
	UNIQUE="$(cat /dev/urandom | tr -cd '[:alnum:]' | head -c 7)"
	[[ -n "$UNIQUE" ]] ||
		die "failed to generate unique snapshot name suffix"

	#
	# We need to keep the snapshot names used here in sync with the
	# logic that retrieves the snapshot name during rollback. Thus,
	# if we change the snapshot names here, we likely also need to
	# modify "get_dataset_rollback_snapshot_name()" in "common.sh".
	#
	# shellcheck disable=SC2153
	zfs snapshot -r \
		"$ROOTFS_CONTAINER@execute-upgrade.$UNIQUE" ||
		die "failed to create recursive rootfs container snapshot"

	#
	# The properties for a snapshot will inherit its values from the
	# parent dataset by default. Thus, in order for these properties
	# to reflect the versions contained in this specific snapshot, we
	# need to explicity set the property here. Otherwise, when the
	# property changes on the dataset (i.e. when we change it later
	# in this script), it'd change for this snapshot, even though
	# the contents of the snapshot wouldn't change.
	#
	copy_required_dataset_property "$PROP_CURRENT_VERSION" \
		"$ROOTFS_CONTAINER" "$ROOTFS_CONTAINER@execute-upgrade.$UNIQUE"
	copy_optional_dataset_property "$PROP_HOTFIX_VERSION" \
		"$ROOTFS_CONTAINER" "$ROOTFS_CONTAINER@execute-upgrade.$UNIQUE"
fi

if [[ -f /etc/apt/sources.list ]]; then
	mv /etc/apt/sources.list /etc/apt/sources.list.orig ||
		die "failed to save /etc/apt/sources.list"
fi

cat <<EOF >/etc/apt/sources.list ||
deb [trusted=yes] file://$IMAGE_PATH focal delphix
EOF
	die "failed to configure apt sources"

start_stdout_redirect_to_system_log
start_stderr_redirect_to_system_log

fix_and_migrate_services

#
# Due to DLPX-77949, docker needs to be masked for the duration
# of the upgrade so that it does not get restarted automatically on
# upgrade, which would also force a restart of the delphix-mgmt
# service (since the latter has a dependency on docker.service), and
# thus interrupt the upgrade.
#
# Once the upgrade is done we restart delphix.target, which will
# attempt to restart both delphix-mgmt and docker, so docker
# needs to be unmasked before that point. As such, docker is
# unmasked at the end of this script.
#
systemctl mask docker.service

#
# Older versions (i.e. the 6.0.0.0 release) of the "nfs-kernel-server"
# package had "etab" file delivered as part of the package. Thus, when
# upgrading the package, the existing "etab" file would get replaced
# with a new/empty "etab" file from the new package.
#
# This file is dynamically modified during runtime, to contain the list
# of currently exported filesystems. Thus, when it's replaced on upgrade
# with an empty file, this results in all exports being unexported; i.e.
# mountd notices that the file is empty, interprets that to mean no
# filesystems should be currently exported, and then unexports all
# previously exported filesystems.
#
# This is problematic, since the act of unexporting the filesystems can
# result in client errors, if those exports are being actively used at
# the time of the upgrade/unexport.
#
# To avoid this issue, we're modifying the dpkg state, such that dpkg
# will no longer associate the "etab" file with the "nfs-kernel-server"
# package. This way, when the old package is removed, the "etab" file
# will not be automatically manipulated by dpkg.  We *must* do this
# prior to invoking "apt-get" below, to ensure we remove the association
# before upgrading the package.
#
# FWIW, we tried to do this via the package's "preinst" package hook,
# but that did not help; the "etab" file was still removed when the old
# package was replaced/upgraded.
#
# We can safely remove this once running a version that no longer
# supports upgrading from the 6.0.0.0 release, since that's the only
# release that suffers from this defect; we've dis-associated the "etab"
# file from the "nfs-kernel-server" package in all later releases.
#
[[ -e /var/lib/dpkg/info/nfs-kernel-server.list ]] &&
	sed -i '/\/var\/lib\/nfs\/etab/d' /var/lib/dpkg/info/nfs-kernel-server.list

apt_get update || die "failed to update apt sources"

#
# Currently, we need to run the delphix-platform's "postinst" packaging hook
# prior to the installation of the postgresql package. Further, right now,
# the postgresql package is pulled in as a dependency of the
# delphix-virtualization package. Thus, for the case of not-in-place upgrades,
# we accomplish this goal (of installing the delphix-platform package prior
# to the installation of the postgresql package) by first installing the
# delphix-platform package here, and then installing all other packages later.
# For the case of in-place upgrades, we can skip this step, as we assume the
# postgresql package is already installed, and simply upgrade all packages
# below.
#
# Note that we have the same issue during appliance-build, and it is solved
# by installing delphix-virtualization at a later stage of the build via
# ansible hooks, when the delphix-platform package has already been installed.
#
if ! dpkg-query -l "delphix-platform-$platform" &>/dev/null; then
	apt_get install -y "delphix-platform-$platform" ||
		die "failed to install delphix-platform"
fi

#
# To accomplish the removal of packages that are no longer required
# after the upgrade, we need to mark all packages currently installed as
# "auto" installed. This way, after explicitly installing all packages
# for the new "delphix-entire" version, the only "auto" installed
# packages still remaining on the system will be ones that aren't
# required by the new "delphix-entire".
#
dpkg-query -Wf '${Package}\n' | xargs apt-mark auto ||
	die "failed to mark packages as 'auto' installed"

#
# In order to perform an upgrade of the Delphix appliance, we must first
# install the "delphix-entire" package. This package will contain a
# "packages.list.gz" file, which has a (gzip compressed) list of all the
# packages that need to be installed for that particular version of the
# Delphix appliance. We then use that file to explicitly install all of
# those packages.
#
# We use this file rather than package dependencies (e.g. having the
# "delphix-entire" package "Depends" on all the packages) for a couple
# of reasons:
#
# 1. When moving from one "delphix-entire" version to another, it's
#    possible that we'll want to "downgrade" some package that the
#    "delphix-entire" package would depend on. Unfortunately, if we
#    simply used "apt-get install delphix-entire", this would not allow
#    us to install the "downgraded" version of the package.
#
#    For example, consider the following situation:
#
#        - "delphix-entire" is currently installed at version 2.0
#        - "zfs" is currently installed at version 2.0
#        - "delphix-entire" version 3.0 depends on "zfs" version 1.0
#
#    If we tried to "apt-get install delphix-entire=3.0" it would fail
#    because it could not install "zfs" version 1.0, since that'd be a
#    downgrade of the "zfs" package. This is because "apt-get install"
#    doesn't support downgrading dependent packages, only packages
#    explicitly specified on the command line; e.g. we'd have to run the
#    command "apt-get install delphix-entire=3.0 zfs=1.0" for this to
#    work.
#
# 2. Often times, developers want to build and install upgraded packages
#    that "delphix-entire" would depend on. Since the dependencies of
#    the "delphix-entire" package would have to depend on explicit
#    versions of each package, this would prevent packages from being
#    upgraded without either:
#
#        a) also removing the "delphix-entire" package, or
#        b) building and installing new "delphix-entire" package that
#           depends on the new package being installed.
#
#    Both options, (a) and (b), are undesirable; by not using package
#    dependencies we avoid having to deal with this problem.
#

# shellcheck disable=SC2153
apt_get install \
	-y --allow-downgrades --reinstall \
	"delphix-entire-$platform=$VERSION" ||
	die "upgrade failed; from '$CURRENT_VERSION' to '$VERSION'"

#
# Since we mark all currently installed packages as "auto" earlier in
# this script, we need to ensure the delphix-entire package that we just
# installed is marked "manual", to avoid it being removed later in this
# script. We must explicitly do this here, as it seems this isn't
# automatially done when installing or upgrading the package;
# particularly in the case of "--reinstall", which replaces the current
# package with a new package of the same version (i.e. for hotfixes).
#
apt-mark manual "delphix-entire-$platform" ||
	die "failed to mark 'delphix-entire' package as 'manual' installed"

[[ -f "/usr/share/doc/delphix-entire-$platform/packages.list.gz" ]] ||
	die "delphix-entire's packages.list.gz file is missing"

zcat "/usr/share/doc/delphix-entire-$platform/packages.list.gz" |
	xargs_apt_get install -y --allow-downgrades ||
	die "failed to install packages listed in packages.list.gz file"

zcat "/usr/share/doc/delphix-entire-$platform/packages.list.gz" |
	cut -d= -f1 | xargs apt-mark manual ||
	die "failed to mark as manual packages listed in packages.list.gz file"

#
# After we've successfully installed the new packages and marked them
# all as manual-ly installed, we need to remove all packages that are no
# longer required. For example, if the old "delphix-entire" version
# required a package, and the new version no longer requires that
# package, the commands run above will not remove the package.
#
# Thus, we need to explicitly remove all these "leaked" packages here,
# and we rely on the fact that we apt-mark'ed all "old" packages as
# "auto" installed, and apt-mark'ed all "new" packages as "manual"
# installed. This way, we can easily determine which packages need to be
# removed, by simply removing all packages that're still labelled as
# "auto" installed.
#
# Additionally, we want to keep all packages relating to the currently
# running kernel. This way, in the event that the new kernel does not
# work properly, we'll still have the currently running kernel available
# to use as a fallback.
#
# shellcheck disable=SC2046
apt_get purge -y $(apt-mark showauto | grep -v "$(uname -r)") ||
	die "failed to remove no-longer-needed packages"

#
# Package configuration files are only automatically removed by the
# package manager when the package that "owns" the file is "purged".
# Thus, when upgrading a package to a new version that no longer
# delivers a "conffile" that it used to deliver, that conffile will not
# be automatically removed by the package manager.
#
# Generally, it is the responsibility of each specific package to
# properly remove the conffile that is no longer used by the package.
# Unfortuantely this means that if a given package does not do this
# removal, the conffile will remain on the system indefinitely. Further,
# that configuration file may actually result in a mis-configured
# system.
#
# To help avoid mis-configuration when packages mistakenly omit the
# removal of their conffiles, we have logic below to automatically
# detect these "obsolete" conffiles, and remove them proactively.
# Further, after we remove these obsolete files, we "--reinstall" the
# package that previously owned the file, such that the package manager
# will no longer report that file as obsolete.
#
dpkg-query -Wf '${Conffiles}\n' | awk '$3 == "obsolete" {print $1}' |
	while read -r file; do
		package=$(dpkg-query -S "$file" | awk -F: '{print $1}')
		[[ -n "$package" ]] || die "failed to determine package name"

		#
		# We should only be operating on currently installed
		# packages. So, to verify the package retrieved above,
		# we double check that the package is installed.
		#
		dpkg-query -W "$package" &>/dev/null ||
			die "package '$package' is not installed"

		#
		# If the configuration file was moved to another package it
		# will be listed for the original package as "obsolete" while
		# also being listed as non-obsolete for the destination package.
		#
		if [[ $(dpkg-query -Wf '${Conffiles}\n' "$package" |
			awk '$1 == "'"$file"'" {print $3}') != "obsolete" ]]; then
			echo "configuration file '$file' has moved to package '$package'"
			continue
		fi

		rm -f "$file" ||
			die "failed to remove file '$file' of package '$package'"

		#
		# Since we run this each time a file is removed, if a
		# package has multiple obsolete files, we'll end up
		# reinstalling the package multiple times. Currently
		# this isn't a problem, since we haven't hit a case
		# where a package has multiple obsolete files; but
		# perhaps this will change in the future, at which point
		# we can optimize this better to handle that case.
		#
		apt_get install -y --reinstall "$package" ||
			die "failed to reinstall package '$package'"
	done || die "failed to remove obsolete package configuration files"

#
# Unmask docker, which was masked at the beginning of the upgrade due
# to DLPX-77949.
#
systemctl unmask docker.service

stop_stdout_redirect_to_system_log
stop_stderr_redirect_to_system_log

#
# Finally, for all of the packages listed in the "packages.list" file,
# we verify the package is installed and its version is correct; this
# is simply to help us be confident that upgrade behaves as we expect.
#
zcat "/usr/share/doc/delphix-entire-$platform/packages.list.gz" | sed 's/=/ /' |
	while read -r name version; do
		installed=$(dpkg-query -Wf '${Version}' "$name")
		compare_versions "$installed" "=" "$version" ||
			die "'$name' package version incompatible;" \
				"'$installed' '=' '$version'"
	done || die "verification of package versions failed"

if [[ -f /etc/apt/sources.list.orig ]]; then
	mv /etc/apt/sources.list.orig /etc/apt/sources.list ||
		die "failed to restore /etc/apt/sources.list"
else
	#
	# If "/etc/apt/sources.list.orig" does not exist, then it likely
	# means the system didn't have a "/etc/apt/sources.list" file to
	# begin with; so we restore that state by simply removing our
	# dynamically generated "sources.list" file (generated earlier).
	#
	rm /etc/apt/sources.list
fi

#
# As mentioned in an earlier comment, when $CURRENT_VERSION is not set,
# we're assuming we're running the intial "execute" for a not-in-place
# container. As such, when we detect this, we must also set the intial
# version property, as this will not already be set (see also comments
# in the "upgrade-container" script).
#
# We need to do this after we install all of the delphix software above,
# since the software needed to set this property wouldn't otherwise be
# installed (e.g. the "zfs" command wouldn't be installed).
#
if [[ -z "$CURRENT_VERSION" ]]; then
	ROOTFS_CONTAINER="$(get_mounted_rootfs_container_dataset)"
	[[ -n "$ROOTFS_CONTAINER" ]] ||
		die "unable to determine currently mounted rootfs container"

	#
	# Since this is the first time installing the delphix software
	# on this container (see the comment above), we need to set the
	# intial version property since it will not already exist.
	#
	VALUE="$(zfs get -Hpo value "$PROP_INITIAL_VERSION" "$ROOTFS_CONTAINER")"

	#
	# When "zfs get" is used, and the property is not set,
	# it will return "-" rather than the empty string. This
	# is why we compare for "-" here.
	#
	[[ "$VALUE" == "-" ]] ||
		die "property '$PROP_INITIAL_VERSION'" \
			"already set to '$VALUE' for '$ROOTFS_CONTAINER'"

	zfs set "$PROP_INITIAL_VERSION=$VERSION" "$ROOTFS_CONTAINER" ||
		die "failed to set property '$PROP_INITIAL_VERSION'" \
			"to '$VERSION' for '$ROOTFS_CONTAINER'"
fi

zfs set "$PROP_CURRENT_VERSION=$VERSION" "$ROOTFS_CONTAINER" ||
	die "failed to set property '$PROP_CURRENT_VERSION'" \
		"to '$VERSION' for '$ROOTFS_CONTAINER'"

zfs set "$PROP_MINIMUM_VERSION=$MINIMUM_VERSION" "$ROOTFS_CONTAINER" ||
	die "failed to set property '$PROP_MINIMUM_VERSION'" \
		"to '$MINIMUM_VERSION' for '$ROOTFS_CONTAINER'"

if [[ -n "$HOTFIX" ]]; then
	zfs set "$PROP_HOTFIX_VERSION=$HOTFIX" "$ROOTFS_CONTAINER" ||
		die "failed to set property '$PROP_HOTFIX_VERSION'" \
			"to '$HOTFIX' for '$ROOTFS_CONTAINER'"
else
	zfs inherit "$PROP_HOTFIX_VERSION" "$ROOTFS_CONTAINER" ||
		die "failed to inherit property '$PROP_HOTFIX_VERSION'" \
			"for '$ROOTFS_CONTAINER'"
fi

# In AWS environments, changing instance type could result in generation of
# different network interface names compared to the existing ones. This mismatch
# causes our netplan file handler in the osadmin service to remove the existing
# entries in the netplan plan, because they are not to be found on the new instance.
# However, the mac address remains consistent and does not change with a change in
# the instance types.
# To handle this, from 6.0.16.0 onwards, we are switching to use mac address based
# interface names in the netplan file. To facilitate this change across upgrades from
# older verrsions to 6.0.16.0 and above, we create a map from the network interface
# names to their corresponding mac address, resulting in mac addrress based interface
# names. For wider context, see DLPX-75209.
#
# For deferred upgrades, we cannot know when the engine will be rebooted into the new
# image. The decision depends on the end-user. Hence we always create the map file
# irrespective of the upgrade type, to allow the upgrade finalize logic to copy the
# map file from the currently mounted root filesystem to the root filesystem of the
# target container.
#
# The map creation logic does not apply to engines being upgraded from 6.0.16.0 onwards.
# This is because the netplan file from 6.0.16.0 will by default be populated with mac
# address based interface names. This makes this logic redundant for upgrades from
# 6.0.16.0 and onwards. Hence, we must remove this logic as soon as we mark 6.0.16.0 as
# the minimum version supported release.

# The container does not have visibility into the complete network namespace of the
# engine. Hence we need to create the map outside the container to ensure the presense
# of all the interfaces in the map
if ! systemd-detect-virt --container --quiet && [[ $(get-appliance-platform) == "aws" ]]; then
	# While booting back to the original image post rollback, we want to reuse the original
  	# netplan file that consisted of the canonical interface names generated by the kernel.
  	# Hence, we skip creating the map file in rollback execution path
  	if [[ "$1" != "rollback" ]]; then
    		generate_interface_to_mac_address_map
  	fi
fi

#
# Before we exit, we want to ensure all of the changes made to the root
# pool via the packaging operations above have made it to disk.
#
zpool sync rpool || die "'zpool sync rpool' failed"

exit 0
