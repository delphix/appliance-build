#!/bin/bash
#
# Copyright 2018 Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

. "${BASH_SOURCE%/*}/common.sh"

IMAGE_PATH=$(get_image_path)
[[ -n "$IMAGE_PATH" ]] || die "failed to determine image path"

set -o pipefail

function usage() {
	echo "$(basename "$0"): $*" >&2
	echo "Usage: $(basename "$0") -p <platform>"
	exit 2
}

function apt_get() {
	DEBIAN_FRONTEND=noninteractive apt-get \
		-o Dpkg::Options::="--force-confdef" \
		-o Dpkg::Options::="--force-confold" \
		"$@"
}

function xargs_apt_get() {
	DEBIAN_FRONTEND=noninteractive xargs apt-get \
		-o Dpkg::Options::="--force-confdef" \
		-o Dpkg::Options::="--force-confold" \
		"$@"
}

while getopts ':rlBfsp:' c; do
	case $c in
	r | l | B | f | s) ;; # LX-72: For now, silently ignore these.
	p)
		platform=$OPTARG
		;;
	*) usage "illegal options -- $OPTARG" ;;
	esac
done

[[ -z "$platform" ]] && usage "platform must be specified"

#
# When upgrading the packages on with this script, we want to ensure
# that only a single process is attempting to do this at any given time.
# Thus, we add some locking in case multiple processes call this script
# concurrently; to prevent accidental corruption and/or failures.
#
if [[ "$UPGRADE_EXECUTE_LOCKED" != "true" ]]; then
	exec env UPGRADE_EXECUTE_LOCKED="true" \
		flock -e "/var/run/delphix-upgrade-execute-lock" "$0" "$@"
fi

source_version_information

#
# When a not-in-place upgrade is performed, the rootfs container that's
# created will not initially have any delphix software installed in it.
# As a result, no version properties will be set on the container
# dataset either.
#
# To detect this situation, we check if the "zfs" command is installed.
# If it's installed, we query the current version. If it's not
# installed, we assume we're running the initial "execute" for a
# not-in-place container and don't set $CURRENT_VERSION.
#
if type zfs &>/dev/null; then
	CURRENT_VERSION=$(get_current_version) || die "failed to get version"
fi

if [[ -n "$CURRENT_VERSION" ]]; then
	verify_upgrade_is_allowed

	ROOTFS_CONTAINER="$(get_mounted_rootfs_container_dataset)"
	[[ -n "$ROOTFS_CONTAINER" ]] ||
		die "unable to determine currently mounted rootfs container"

	#
	# It's possible for this script to be run multiple times,
	# and each time this script is run, we want to keep a
	# unique snapshot for each invocation.
	#
	# shellcheck disable=SC2002
	UNIQUE="$(cat /dev/urandom | tr -cd '[:alnum:]' | head -c 7)"
	[[ -n "$UNIQUE" ]] ||
		die "failed to generate unique snapshot name suffix"

	#
	# We need to keep the snapshot names used here in sync with the
	# logic that retrieves the snapshot name during rollback. Thus,
	# if we change the snapshot names here, we likely also need to
	# modify "get_dataset_rollback_snapshot_name()" in "common.sh".
	#
	# shellcheck disable=SC2153
	zfs snapshot -r \
		"$ROOTFS_CONTAINER@execute-upgrade.$UNIQUE" ||
		die "failed to create recursive rootfs container snapshot"

	#
	# The properties for a snapshot will inherit its values from the
	# parent dataset by default. Thus, in order for this property to
	# reflect the version contained in this specific snapshot, we
	# need to explicity set the property here. Otherwise, when the
	# property changes on the dataset (i.e. when we change it later
	# in this script), it'd change for this snapshot, even though
	# the contents of the snapshot wouldn't change.
	#
	copy_dataset_property "$PROP_CURRENT_VERSION" \
		"$ROOTFS_CONTAINER" "$ROOTFS_CONTAINER@execute-upgrade.$UNIQUE"
fi

if [[ -f /etc/apt/sources.list ]]; then
	mv /etc/apt/sources.list /etc/apt/sources.list.orig ||
		die "failed to save /etc/apt/sources.list"
fi

cat <<EOF >/etc/apt/sources.list ||
deb [trusted=yes] file://$IMAGE_PATH/public bionic delphix
EOF
	die "failed to configure apt sources"

start_stdout_redirect_to_system_log
start_stderr_redirect_to_system_log

apt_get update || die "failed to update apt sources"

#
# First make sure delphix-platform-<platform> is installed. This package
# is required by delphix-entire-<platform>, and would be installed even
# if we just relied on the packages.list.gz file log below. However,
# there are problems related to virtual packages that arise if we just
# did that. In particular, the following could happen (using AWS as the
# example for the platform on which the upgrade is being done):
#
#  - We install the package requirements for "delphix-entire-aws" using
#    the packages.list.gz file.
#
#  - One of the packages in that list is the "delphix-virtualization"
#    package, so it marks that package and its dependencies for
#    installation. One of its dependencies is the virtual package
#    "delphix-platform".
#
#  - Apt then sees that there are multiple concrete packages which
#    provide the "delphix-platform" virtual package. It chooses one of
#    these arbitrarily, say "delphix-platform-kvm".
#
#  - Apt marks all transitive dependencies of "delphix-platform-kvm" for
#    installation, including, say, "linux-image-4.15.0-1028-kvm".
#
#  - After processing the dependencies of "delphix-virtualization", Apt
#    continues to process the other dependencies of "delphix-entire-aws",
#    including "delphix-platform-aws".
#
#  - Apt then sees that "delphix-platform-aws" conflicts with
#    "delphix-platform-kvm", so it un-marks "delphix-platform-kvm" for
#    installation, allowing "delphix-platform-aws" to satisfy the
#    "delphix-virtualization" dependency on "delphix-platform". However,
#    it does _not_ unmark all of the dependencies of
#    "delphix-platform-kvm", so some unnecessary kvm-related packages
#    end up being installed, such as "linux-image-4.15.0-1028-kvm"
#
# In short, we can end up with some unwanted packages installed because
# Apt marked and then unmarked some package for installation while
# trying to satisfy a dependency on a virtual package.
#
# To avoid this we install the delphix-platform-<platform> package that
# we want before installing delphix-entire-<platform> and it's required
# packages. If some delphix-platform package is already installed, that
# dependency is already satisfied and Apt doesn't need to choose an
# arbitrary one to satisfy the dependency.
#
# In general, we don't want upgrade to need know too much about the set
# of packages to be installed. However, it seems reasonable to make an
# exception for delphix-platform because delphix-platform is a
# fundemental piece of the architecture of the appliance. Among other
# things, it is the mechanism that we use to orchestrate the installation
# all of the platform-dependant bits of the appliance.
#
apt_get install -y "delphix-platform-$platform" ||
	die "failed to install delphix-platform"

#
# To enable the use of "autoremove" later in this script to remove all
# packages that are no longer required after the upgrade, we need to
# mark all packages currently installed as "auto" installed. This way,
# after explicitly installing all packages for the new "delphix-entire"
# version, the only "auto" installed packages still remaining on the
# system will be ones that aren't required by the new "delphix-entire".
#
dpkg-query -Wf '${Package}\n' | xargs apt-mark auto ||
	die "failed to mark packages as 'auto' installed"

#
# While we marked all packages to "auto" above, so they'd be removed
# when they're no longer required, we want to prevent the removal of old
# kernel packages. This is so that we can boot into the old kernel(s)
# if we ever need to; e.g. after a failed kernel upgrade. We accomplish
# this by marking all "delphix-kernel-*" packages as "manual"-ly
# installed. The "delphix-kernel-*" package(s) will have package
# dependencies on the linux kernel package(s), and all other kernel
# packages that're required for that specific kernel (e.g. zfs kernel
# module package, connstat kernel module package, etc.). Thus, as long
# as the "delphix-kernel-*" package remains installed, all other
# dependent packages should also remain installed.
#
dpkg-query -Wf '${Package}\n' "delphix-kernel-*" | xargs apt-mark manual ||
	die "failed to mark 'delphix-kernel-*' packages as 'manual' installed"

#
# In order to perform an upgrade of the Delphix appliance, we must first
# install the "delphix-entire" package. This package will contain a
# "packages.list.gz" file, which has a (gzip compressed) list of all the
# packages that need to be installed for that particular version of the
# Delphix appliance. We then use that file to explicitly install all of
# those packages.
#
# We use this file rather than package dependencies (e.g. having the
# "delphix-entire" package "Depends" on all the packages) for a couple
# of reasons:
#
# 1. When moving from one "delphix-entire" version to another, it's
#    possible that we'll want to "downgrade" some package that the
#    "delphix-entire" package would depend on. Unfortunately, if we
#    simply used "apt-get install delphix-entire", this would not allow
#    us to install the "downgraded" version of the package.
#
#    For example, consider the following situation:
#
#        - "delphix-entire" is currently installed at version 2.0
#        - "zfs" is currently installed at version 2.0
#        - "delphix-entire" version 3.0 depends on "zfs" version 1.0
#
#    If we tried to "apt-get install delphix-entire=3.0" it would fail
#    because it could not install "zfs" version 1.0, since that'd be a
#    downgrade of the "zfs" package. This is because "apt-get install"
#    doesn't support downgrading dependent packages, only packages
#    explicitly specified on the command line; e.g. we'd have to run the
#    command "apt-get install delphix-entire=3.0 zfs=1.0" for this to
#    work.
#
# 2. Often times, developers want to build and install upgraded packages
#    that "delphix-entire" would depend on. Since the dependencies of
#    the "delphix-entire" package would have to depend on explicit
#    versions of each package, this would prevent packages from being
#    upgraded without either:
#
#        a) also removing the "delphix-entire" package, or
#        b) building and installing new "delphix-entire" package that
#           depends on the new package being installed.
#
#    Both options, (a) and (b), are undesirable; by not using package
#    dependencies we avoid having to deal with this problem.
#

# shellcheck disable=SC2153
apt_get install -y --allow-downgrades "delphix-entire-$platform=$VERSION" ||
	die "upgrade failed; from '$CURRENT_VERSION' to '$VERSION'"

[[ -f "/usr/share/doc/delphix-entire-$platform/packages.list.gz" ]] ||
	die "delphix-entire's packages.list.gz file is missing"

zcat "/usr/share/doc/delphix-entire-$platform/packages.list.gz" |
	xargs_apt_get install -y --allow-downgrades ||
	die "failed to install packages listed in packages.list.gz file"

#
# After we've successfully installed the new packages, we need to remove
# all packages that are no longer required. For example, if the old
# "delphix-entire" version required a package, and the new version no
# longer requires that package, the commands run above will not remove
# the package. Thus, we need to run "autoremove" to ensure all packages
# that fall into this category are removed.
#
apt_get autoremove --purge -y || die "autoremove after upgrade failed"

stop_stdout_redirect_to_system_log
stop_stderr_redirect_to_system_log

#
# Finally, for all of the packages listed in the "packages.list" file,
# we verify the package is installed and its version is correct; this
# is simply to help us be confident that upgrade behaves as we expect.
#
zcat "/usr/share/doc/delphix-entire-$platform/packages.list.gz" | sed 's/=/ /' |
	while read -r name version; do
		installed=$(dpkg-query -Wf '${Version}' "$name")
		compare_versions "$installed" "=" "$version" ||
			die "'$name' package version incompatible;" \
				"'$installed' '=' '$version'"
	done || die "verification of package versions failed"

if [[ -f /etc/apt/sources.list.orig ]]; then
	mv /etc/apt/sources.list.orig /etc/apt/sources.list ||
		die "failed to restore /etc/apt/sources.list"
fi

#
# As mentioned in an earlier comment, when $CURRENT_VERSION is not set,
# we're assuming we're running the intial "execute" for a not-in-place
# container. As such, when we detect this, we must also set the intial
# version property, as this will not already be set (see also comments
# in the "upgrade-container" script).
#
# We need to do this after we install all of the delphix software above,
# since the software needed to set this property wouldn't otherwise be
# installed (e.g. the "zfs" command wouldn't be installed).
#
if [[ -z "$CURRENT_VERSION" ]]; then
	ROOTFS_CONTAINER="$(get_mounted_rootfs_container_dataset)"
	[[ -n "$ROOTFS_CONTAINER" ]] ||
		die "unable to determine currently mounted rootfs container"

	#
	# Since this is the first time installing the delphix software
	# on this container (see the comment above), we need to set the
	# intial version property since it will not already exist.
	#
	VALUE="$(zfs get -Hpo value "$PROP_INITIAL_VERSION" "$ROOTFS_CONTAINER")"

	#
	# When "zfs get" is used, and the property is not set,
	# it will return "-" rather than the empty string. This
	# is why we compare for "-" here.
	#
	[[ "$VALUE" == "-" ]] ||
		die "property '$PROP_INITIAL_VERSION'" \
			"already set to '$VALUE' for '$ROOTFS_CONTAINER'"

	zfs set "$PROP_INITIAL_VERSION=$VERSION" "$ROOTFS_CONTAINER" ||
		die "failed to set property '$PROP_INITIAL_VERSION'" \
			"to '$VERSION' for '$ROOTFS_CONTAINER'"
fi

zfs set "$PROP_CURRENT_VERSION=$VERSION" "$ROOTFS_CONTAINER" ||
	die "failed to set property '$PROP_CURRENT_VERSION'" \
		"to '$VERSION' for '$ROOTFS_CONTAINER'"

#
# Before we exit, we want to ensure all of the changes made to the root
# pool via the packaging operations above have made it to disk.
#
zpool sync rpool || die "'zpool sync rpool' failed"

exit 0
