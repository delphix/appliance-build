#!/bin/bash
#
# Copyright 2018 Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Reset the umask to the default value. When called from the app-stack the
# umask is set to 0027. Since those scripts can be called manually, we want
# to have a consistent result regardless of the caller. A umask of 0022
# makes directories created by this script accessible by everyone by default,
# which is important for directories such as /export/home.
#
umask 0022

set -o pipefail

function die() {
	echo "$(basename "$0"): $*" >&2
	exit 1
}

#
# Here, we assume Linux dataset names starts with "rpool/ROOT", and also
# assume that there can be at most one migration dataset applied in current OS
# since migration is only supported from *fixed* 5.3.X version to 6.0.X version.
# Also, it is not possible to get a version from dataset name in Linux since
# names are randomly generated.
#

LX_DATASET="rpool/ROOT"
if ! zfs list ${LX_DATASET} &>/dev/null; then
	echo "Linux dataset '${LX_DATASET}' is not installed."
	exit 0
fi

LX_RDS_PARENT=$(zfs list -o name -H -d 1 "$LX_DATASET" | tail -n 1)
[[ -n $LX_RDS_PARENT ]] || die "could not find Linux RDS parent dataset"
LX_CONTAINER="${LX_RDS_PARENT##*/}"
LX_RDS_TMP_ROOT_MOUNT="/tmp/$LX_CONTAINER/root"

MDS_SNAPNAME="MDS-CLONE-upgradeverify"
MDS_CLONE=domain0/$MDS_SNAPNAME
SVC=svc:/system/delphix/postgres:$MDS_SNAPNAME
PG_DATA=/$MDS_CLONE/db

BOOT_MENU=/boot/menu.rc.local
BOOT_MENU_COPY=$BOOT_MENU.copy

function dx_apply_cleanup() {
	#
	# Restore original version of the bootloader
	#
	if [[ -e $BOOT_MENU_COPY ]]; then
		mv $BOOT_MENU_COPY $BOOT_MENU ||
			die "failed to restore copy of $BOOT_MENU"
	fi

	rm -f /boot/vmlinuz-* /boot/initrd.img-* ||
		die "failed to destroy previously copied Linux kernel data"
}

function dx_verify_cleanup() {
	#
	# dx_verify creates a clone of the MDS dataset and the postgres
	# service as well as a clone of /var/delphix for masking validation.
	# If any are left, clean them up. (This logic is based on dx_manage_pg
	# stop and cleanup.)
	#
	local sta
	sta=$(svcs -Ho sta $SVC)
	if [[ -n "$sta" ]]; then
		/usr/sbin/svcadm disable -s $SVC ||
			die "unable to disable SMF service: $SVC"
		/usr/sbin/svccfg delete -f $SVC ||
			die "unable to delete SMF service: $SVC"
	fi

	#
	# Clean up the postmaster.pid leftover from the main MDS in the
	# snapshot. This needs to be done after disabling the SMF service in
	# case the postmaster.pid was instead from the active clone.
	#
	if [[ -e $PG_DATA/postmaster.pid ]]; then
		echo "renaming $PG_DATA/postmaster.pid to $PG_DATA/postmaster.pid.original"
		mv $PG_DATA/postmaster.pid $PG_DATA/postmaster.pid.original ||
			echo "failed to move postmaster.pid file"
	fi

	[[ $(zfs list domain0/mds@$MDS_SNAPNAME) ]] &&
		zfs destroy -R "domain0/mds@$MDS_SNAPNAME"
	[[ $(zfs list domain0/mds@$MDS_SNAPNAME) ]] &&
		die "unable to cleanup domain0/mds@$MDS_SNAPNAME"

	runningVar=$(mount | awk '/^\/var\/delphix /{ print $3 }')
	[[ $(zfs list "$runningVar@$MDS_SNAPNAME") ]] &&
		zfs destroy -R "$runningVar@$MDS_SNAPNAME"
	[[ $(zfs list "$runningVar@$MDS_SNAPNAME") ]] &&
		die "unable to cleanup $runningVar@$MDS_SNAPNAME"
}

dx_apply_cleanup
dx_verify_cleanup

#
# Recursively destroy and force-unmount the Linux Root Dataset. Even though all the
# datasets are cleaned up in a normal execution of Verify, this handles the case when
# it was cancelled early.
#
zfs destroy -rf ${LX_DATASET} || die "Failed to destroy Linux dataset '${LX_DATASET}'"
rm -rf "$LX_RDS_TMP_ROOT_MOUNT"
