#!/bin/bash
#
# Copyright (c) 2016, 2019 by Delphix. All rights reserved.
#

#
# Utility for getting and setting upgrade stress options.
# Supported failure points listed below.
#
# This file may be sourced so the variable/function names are made as unique
# as possible in addition to the double underscores in front.
#
# Note that those stress options are intended to be run exclusively for
# migration testing, before the upgrade reboot.
#

__STRESS_OPTIONS_JSON=$(
	cat <<-EOF
		{
		"STRESS_DX_APPLY_FAIL_AFTER_VERSION_CHECK": {
		    "location": "pre-reboot",
		    "err_msg": "Stress option triggered after version check.",
		    "auto_unset": true
		},
		"STRESS_DX_APPLY_FAIL_BEFORE_UNMOUNTING": {
		    "location": "pre-reboot",
		    "err_msg": "Stress option triggered before dx_apply dataset cleanup.",
		    "auto_unset": true
		},
		"STRESS_DX_INSTALL_ARCHIVE_FAIL_AFTER_VERIFY_DX_ARCHIVE": {
		    "location": "pre-reboot",
		    "err_msg": "Stress option triggered after verify_dx_archive.",
		    "auto_unset": true
		},
		"STRESS_DX_VERIFY_FAIL_HOTFIX": {
		    "location": "pre-reboot",
		    "err_msg": "Stress option triggered to fail hotfix check.",
		    "auto_unset": true
		},
		"STRESS_DX_VERIFY_FAIL_AFTER_TEST_MIGRATION": {
		    "location": "pre-reboot",
		    "err_msg": "Stress option triggered after upgrade-verify.jar.",
		    "auto_unset": true
		},
		"STRESS_DX_EXECUTE_FAIL_AFTER_CONFIG_MIGRATION": {
		    "location": "pre-reboot",
		    "err_msg": "Stress option triggered after migrating OS config.",
		    "auto_unset": true
		},
		"STRESS_DX_EXECUTE_FAIL_BEFORE_REBOOT": {
		    "location": "pre-reboot",
		    "err_msg": "Stress option triggered before reboot.",
		    "auto_unset": true
		},
		"STRESS_APPLY_JOB_CLEANUP_BEFORE_DISABLE_UPGRADE_MODE": {
		    "location": "pre-reboot",
		    "err_msg": "Stress option triggered before cleaning up upgrade mode.",
		    "auto_unset": true
		},
		"STRESS_DXSVCINIT_FAIL_AFTER_UPGRADE_MODE": {
		    "location": "boot service",
		    "err_msg": "Stress option triggered after upgrade mode.",
		    "auto_unset": true
		},
		"STRESS_FAIL_BEFORE_MASKING_UPGRADE": {
		    "location": "mgmt service (before point of no return)",
		    "err_msg": "Stress option triggered before upgrading masking.",
		    "auto_unset": true
		},
		"STRESS_FAIL_AFTER_MASKING_UPGRADE": {
		    "location": "mgmt service (before point of no return)",
		    "err_msg": "Stress option triggered after upgrading masking.",
		    "auto_unset": true
		},
		"STRESS_FAIL_BEFORE_UPGRADE_COMMIT": {
		    "location": "mgmt service (before point of no return)",
		    "err_msg": "Stress option triggered before upgrade commit.",
		    "auto_unset": true
		},
		"STRESS_FAIL_BEFORE_DOMAIN_UPGRADE": {
		    "location": "mgmt service (before point of no return)",
		    "err_msg": "Stress option triggered before domain upgrade.",
		    "auto_unset": true
		},
		"STRESS_FAIL_BEFORE_CHECKPOINT_DISCARD": {
		    "location": "mgmt service (before point of no return)",
		    "err_msg": "Stress option triggered before checkpoint discard.",
		    "auto_unset": true
		},
		"STRESS_ROLLBACK_SVC_FAIL_BEFORE_ROLLBACK": {
		    "location": "rollback service (all)",
		    "err_msg": "Stress option triggered before do_rollback.",
		    "auto_unset": false
		},
		"STRESS_ROLLBACK_SVC_FAIL_BEFORE_DX_ROLLBACK": {
		    "location": "rollback service (all)",
		    "err_msg": "Stress option triggered before dx_rollback call.",
		    "auto_unset": false
		},
		"STRESS_ROLLBACK_SVC_FAIL_AFTER_DX_ROLLBACK": {
		    "location": "rollback service (all)",
		    "err_msg": "Stress option triggered after dx_rollback call.",
		    "auto_unset": true
		},
		"STRESS_ROLLBACK_SVC_FAIL_AFTER_REMOUNT_OPT": {
		    "location": "rollback service (stack only)",
		    "err_msg": "Stress option triggered after remounting /opt/delphix.",
		    "auto_unset": false
		},
		"STRESS_ROLLBACK_SVC_FAIL_BEFORE_CLEARING_DEPS": {
		    "location": "rollback service (stack only)",
		    "err_msg": "Stress option triggered before clearing dependent services.",
		    "auto_unset": false
		},
		"STRESS_ROLLBACK_SVC_FAIL_BEFORE_REENABLING_BOOT": {
		    "location": "rollback service (stack only)",
		    "err_msg": "Stress option triggered before re-enabling boot service.",
		    "auto_unset": false
		},
		"STRESS_CKPT_UTIL_FAIL_AFTER_EXPORT_DOMAIN": {
		    "location": "rollback service (OS)",
		    "err_msg": "Stress option triggered after exporting domain0.",
		    "auto_unset": true
		},
		"STRESS_FAIL_AFTER_COMMIT_BEFORE_CHECKPOINT_DISCARD": {
		    "location": "mgmt service (after point of no return)",
		    "err_msg": "Stress option triggered between upgrade commit and checkpoint discard",
		    "auto_unset": true
		},
		"STRESS_FAIL_BEFORE_BOOTLOADER_REWRITE": {
		    "location": "mgmt service (after point of no return, migration only)",
		    "err_msg": "Stress option triggered before rewriting bootloader.",
		    "auto_unset": true
		},
		"STRESS_FAIL_AFTER_UPGRADE_COMMIT": {
		    "location": "mgmt service (after point of no return)",
		    "err_msg": "Stress option triggered after upgrade commit.",
		    "auto_unset": true
		},
		"STRESS_UPGRADEMANAGER_FAIL_IN_START": {
		    "location": "mgmt service (after point of no return)",
		    "err_msg": "Stress option triggered in upgrade manager.",
		    "auto_unset": true
		},
		"STRESS_FAIL_BEFORE_POST_MIGRATION_CLEANUP": {
		    "location": "mgmt service (after point of no return, migation only)",
		    "err_msg": "Stress option triggered before performing post-migration cleanup.",
		    "auto_unset": true
		},
		"STRESS_FAIL_BEFORE_MIGRATION_MARKED_COMPLETED": {
		    "location": "mgmt service (after point of no return, migation only)",
		    "err_msg": "Stress option triggered before marking migration as completed.",
		    "auto_unset": true
		},
		"STRESS_POSTCLEANUP_FAIL_BEFORE_ENABLE_SOURCES": {
		    "location": "mgmt service (after point of no return)",
		    "err_msg": "Stress option triggered before enabling sources.",
		    "auto_unset": true
		},
		"STRESS_MIGRATION_FAIL_BEGIN_MIGRATION_SERVICE": {
		    "location": "migration service",
		    "err_msg": "Stress option triggered starting migration service.",
		    "auto_unset": true
		},
		"STRESS_MIGRATION_FAIL_BEFORE_DOMAIN0_IMPORT": {
		    "location": "migration service",
		    "err_msg": "Stress option triggered before importing domain0.",
		    "auto_unset": true
		},
		"STRESS_MIGRATION_FAIL_AFTER_DOMAIN0_IMPORT": {
		    "location": "migration service",
		    "err_msg": "Stress option triggered after importing domain0.",
		    "auto_unset": true
		},
		"STRESS_MIGRATION_FAIL_AFTER_ZFS_MOUNT": {
		    "location": "migration service",
		    "err_msg": "Stress option triggered after zfs mount -a.",
		    "auto_unset": true
		},
		"STRESS_MIGRATION_FAIL_AFTER_MOUNT_PERMISSION_FIX": {
		    "location": "migration service",
		    "err_msg": "Stress option triggered after fixing mount permissions.",
		    "auto_unset": true
		},
		"STRESS_MIGRATION_FAIL_BEFORE_MIGRATE_CONFIG": {
		    "location": "migration service",
		    "err_msg": "Stress option triggered before calling migrate-config.",
		    "auto_unset": true
		},
		"STRESS_MIGRATION_FAIL_AFTER_MIGRATE_CONFIG": {
		    "location": "migration service",
		    "err_msg": "Stress option triggered after calling migrate-config.",
		    "auto_unset": true
		}
		}
	EOF
)

__STRESS_DATASET=rpool/stress_options
__DLPX_PANIC=com.delphix:panic
__DLPX_SVC_MGMT=svc:/system/delphix/mgmt

function __dx_upg_stress_options_usage() {
	cat <<-EOF >&2
		$(basename "$0"): $*
		Usage:
		 $(basename "$0") --get-options-json
		   Prints out a detailed json of all the supported stress options.
		 $(basename "$0") --set <stress-option>
		   Set the specified stress option to die on trigger.
		   Non-zero exit status on failure.
		 $(basename "$0") --set-panic <stress-option>
		   Set the specified stress option to system panic on trigger.
		   Non-zero exit status on failure.
		 $(basename "$0") --unset <stress-option>
		   Unset the specified stress option.
		   Non-zero exit status on failure.
		 $(basename "$0") --get <stress-option>
		   Returns exit code 3 if given stress option is set to die,
		   0 if not.  Any other non-zero exit code is an unexpected error.
		 $(basename "$0") --get-panic <stress-option>
		   Returns exit code 3 if given stress option is set to panic,
		   0 if not.  Any other non-zero exit code is an unexpected error.
		 $(basename "$0") --panic-or-get-unset <stress-option>
		   If the stress option is set to panic, unset and panic.
		   Otherwise returns exit code:
		     0 - the stress option is unset.
		     3 - the stress option is set, and successfully unset it.
		     4 - the stress option is set, but unsuccessfully unset it.
		   Any other non-zero exit code is an unexpected error.
	EOF
	exit 2
}

function __check_valid_option() {
	local arg="$1"

	local get_names
	get_names=$(
		cat <<-EOF
			import json
			obj=json.loads('''$__STRESS_OPTIONS_JSON''')
			print(" ".join(obj.keys()))
		EOF
	)
	local options
	options=$(python -c "$get_names")

	for option in $options; do
		[[ "$option" == "$arg" ]] && return
	done
	__dx_upg_stress_options_usage "Unsupported stress option '$arg'"
}

function __set_stress_option() {
	local option="$1"
	local panic="$2"

	if ! zfs list "$__STRESS_DATASET" &>/dev/null; then
		zfs create -o mountpoint=legacy "$__STRESS_DATASET" || return 1
	fi

	if ! zfs list "$__STRESS_DATASET/$option" &>/dev/null; then
		zfs create -o mountpoint=legacy -o "$__DLPX_PANIC=$panic" \
			"$__STRESS_DATASET/$option" || return 1
	else
		zfs set "$__DLPX_PANIC=$panic" "$__STRESS_DATASET/$option" || return 1
	fi
	return 0
}

function __unset_stress_option() {
	local option="$1"

	if zfs list "$__STRESS_DATASET/$option" &>/dev/null; then
		zfs destroy "$__STRESS_DATASET/$option" || return 1
	fi
	return 0
}

function __get_stress_option() {
	local option="$1"
	local panic="$2"

	zfs list "$__STRESS_DATASET/$option" &>/dev/null &&
		[[ $(zfs get -Ho value "$__DLPX_PANIC" "$__STRESS_DATASET/$option") == "$panic" ]] && return 3
	return 0
}

function __get_unset_stress_option() {
	local option="$1"
	local panic="$2"

	__get_stress_option "$option" "$panic"
	if [[ $? -eq 3 ]]; then
		__unset_stress_option "$option" || return 4
		return 3
	fi
	return 0
}

function __handle_panic_stress_option() {
	local option="$1"
	local unset="$2"
	local get_func="__get_stress_option"
	$unset && get_func="__get_unset_stress_option"

	$get_func "$option" "true"
	local stress_ret
	stress_ret=$?

	if [[ $stress_ret -eq 3 ]]; then
		uadmin 2 1
	elif [[ $delphix_debug == "true" ]] && [[ $stress_ret -ne 0 ]]; then
		echo "'$get_func' returned $stress_ret"
	fi
}

#
# Fails if the given stress option was set.
# Also fails if we are in debug mode and hit an unexpected return code.
#
# This function should only be used when sourcing this file.  The script
# sourcing this file must implement the function "die" or "stress_die" for
# this method to fail correctly.
#
# A caller may define a "stress_die" function if they want extra functionality
# besides the original "die" method.  See "dx_execute" for an example of this.
# If no "stress_die" is defined, it will fall back to using the original "die"
# method for failing.
#
function __trigger_stress_option() {
	local option=$1
	local delphix_debug
	delphix_debug=$(svcprop -p delphix/debug $__DLPX_SVC_MGMT)

	__handle_panic_stress_option "$option" "false"

	local get_err_msg
	get_err_msg=$(
		cat <<-EOF
			import json
			obj=json.loads('''$__STRESS_OPTIONS_JSON''')
			print(obj["$option"]["err_msg"])
		EOF
	)
	local message
	message=$(python -c "$get_err_msg")

	__get_stress_option "$option" "false"
	local stress_ret=$?
	if [[ $stress_ret -eq 3 ]]; then
		type stress_die >/dev/null 2>&1 && stress_die "$message"
		if ! type die >/dev/null 2>&1; then
			echo "ERROR: no die function defined"
			exit 1
		fi
		die "$message"
	elif [[ $delphix_debug == "true" ]] && [[ $stress_ret -ne 0 ]]; then
		if ! type die >/dev/null 2>&1; then
			echo "ERROR: no die function defined"
			exit 1
		fi
		die "'__get_stress_option' returned $stress_ret"
	fi
}

#
# Fails if the given stress option was set (unsets it too).
# Also fails if we are in debug mode and hit an unexpected return code.
#
# This function should only be used when sourcing this file.  The script
# sourcing this file must implement the function "die" or "stress_die" for
# this method to fail correctly.
#
# A caller may define a "stress_die" function if they want extra functionality
# besides the original "die" method.  See "dx_execute" for an example of this.
# If no "stress_die" is defined, it will fall back to using the original "die"
# method for failing.
#
function __trigger_unset_stress_option() {
	local option="$1"
	local delphix_debug
	delphix_debug=$(svcprop -p delphix/debug $__DLPX_SVC_MGMT)

	__handle_panic_stress_option "$option" "true"

	local get_err_msg
	get_err_msg=$(
		cat <<-EOF
			import json
			obj=json.loads('''$__STRESS_OPTIONS_JSON''')
			print(obj["$option"]["err_msg"])
		EOF
	)
	local message
	message=$(python -c "$get_err_msg")

	__get_unset_stress_option "$option" "false"
	local stress_ret=$?
	if [[ $stress_ret -eq 3 ]]; then
		type stress_die >/dev/null 2>&1 && stress_die "$message"
		if ! type die >/dev/null 2>&1; then
			echo "ERROR: no die function defined"
			exit 1
		fi
		die "$message"
	elif [[ $delphix_debug == "true" ]] && [[ $stress_ret -ne 0 ]]; then
		if ! type die >/dev/null 2>&1; then
			echo "ERROR: no die function defined"
			exit 1
		fi
		die "'__get_unset_stress_option' returned $stress_ret"
	fi
}

[[ $# -ge 1 ]] || __dx_upg_stress_options_usage "missing arguments"
case "$1" in
"--set")
	[[ $# -ge 2 ]] || __dx_upg_stress_options_usage "missing arguments"
	__check_valid_option "$2"
	__set_stress_option "$2" "false"
	exit $?
	;;
"--set-panic")
	[[ $# -ge 2 ]] || __dx_upg_stress_options_usage "missing arguments"
	__check_valid_option "$2"
	__set_stress_option "$2" "true"
	exit $?
	;;
"--unset")
	[[ $# -ge 2 ]] || __dx_upg_stress_options_usage "missing arguments"
	__check_valid_option "$2"
	__unset_stress_option "$2" "false"
	exit $?
	;;
"--get")
	[[ $# -ge 2 ]] || __dx_upg_stress_options_usage "missing arguments"
	__check_valid_option "$2"
	__get_stress_option "$2" "false"
	exit $?
	;;
"--get-panic")
	[[ $# -ge 2 ]] || __dx_upg_stress_options_usage "missing arguments"
	__check_valid_option "$2"
	__get_stress_option "$2" "true"
	exit $?
	;;
"--panic-or-get-unset")
	[[ $# -ge 2 ]] || __dx_upg_stress_options_usage "missing arguments"
	__check_valid_option "$2"

	# Called when the stress option is set and successfully unset, exit 3.
	function stress_die() {
		echo "$*"
		exit 3
	}

	# Called when the stress option is set but failed to unset, exit 4.
	function die() {
		echo "$*"
		exit 4
	}

	__trigger_unset_stress_option "$2"
	exit 0
	;;
"--get-options-json")
	echo "$__STRESS_OPTIONS_JSON"
	exit $?
	;;
"--source")
	# do nothing
	;;
*)
	__dx_upg_stress_options_usage "illegal option '$1'"
	;;
esac

# Do not exit here because sourcing this file will exit the parent.
