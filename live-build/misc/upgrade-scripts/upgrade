#!/bin/bash
#
# Copyright 2018 Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

. "${BASH_SOURCE%/*}/common.sh"

IMAGE_PATH=$(get_image_path)
[[ -n "$IMAGE_PATH" ]] || die "failed to determine image path"

#
# This variable is used to determine if the application verification
# checks should be run as part of the upgrade. The default value can be
# overridden by setting this environment variable to "true", and/or
# passing the "-v" option to this script (see the scripts usage). If
# both, the environment variable and the "-v" option are specified, the
# "-v" option takes precedence.
#
DLPX_UPGRADE_SKIP_VERIFY=${DLPX_UPGRADE_SKIP_VERIFY:-"false"}

function usage() {
	echo "$(basename "$0"): $*" >&2

	PREFIX_STRING="Usage: $(basename "$0")"
	PREFIX_NCHARS=$(echo -n "$PREFIX_STRING" | wc -c)
	PREFIX_SPACES=$(printf "%.s " $(seq "$PREFIX_NCHARS"))

	echo "$PREFIX_STRING [-v] in-place"
	echo "$PREFIX_SPACES [-v] not-in-place"

	exit 2
}

function cleanup_container() {
	#
	# If the CONTAINER variable is empty, this means container
	# creation failed. In that case, the container creation process
	# will have already cleaned up after itself, and there's no
	# further cleanup for us to do here.
	#
	[[ -z "$CONTAINER" ]] && return

	"$IMAGE_PATH/upgrade-container" stop "$CONTAINER" ||
		warn "failed to stop '$CONTAINER'"

	"$IMAGE_PATH/upgrade-container" destroy "$CONTAINER" ||
		warn "failed to destroy '$CONTAINER'"
}

function cleanup_in_place_upgrade() {
	#
	# Capture the exit code here, and use that to determine if
	# upgrade verification was successful or not.
	#
	local rc="$?"

	if [[ "$rc" == "0" || "$DLPX_DEBUG" != "true" ]]; then
		#
		# On success, or on failure when DLPX_DEBUG is not true,
		# we clean up the container previously created. When
		# DLPX_DEBUG is true, we leave the container around on
		# failure to aid debugging efforts.
		#
		cleanup_container
	fi

	return "$rc"
}

function upgrade_in_place() {
	trap cleanup_in_place_upgrade EXIT

	CONTAINER=$("$IMAGE_PATH/upgrade-container" create in-place)
	[[ -n "$CONTAINER" ]] || die "failed to create container"

	"$IMAGE_PATH/upgrade-container" start "$CONTAINER" ||
		die "failed to start '$CONTAINER'"

	"$IMAGE_PATH/upgrade-container" run "$CONTAINER" \
		"$IMAGE_PATH/execute" ||
		die "'$IMAGE_PATH/execute' failed in '$CONTAINER'"

	"$IMAGE_PATH/upgrade-container" run "$CONTAINER" \
		/bin/rm -f /etc/delphix-platform/ansible-done ||
		die "'rm -f /etc/delphix-platform/ansible-done' failed in '$CONTAINER'"

	"$IMAGE_PATH/upgrade-container" run "$CONTAINER" \
		/bin/systemctl start delphix-platform ||
		die "'systemctl start delphix-platform' failed in '$CONTAINER'"

	if [[ "$DLPX_UPGRADE_SKIP_VERIFY" != "true" ]]; then
		"$IMAGE_PATH/upgrade-container" run "$CONTAINER" \
			"$IMAGE_PATH/verify-impl" "$@" ||
			die "'$IMAGE_PATH/verify-impl' '$*' failed in '$CONTAINER'"
	fi

	"$IMAGE_PATH/execute" ||
		die "'$IMAGE_PATH/execute' failed in running appliance."
}

function cleanup_not_in_place_upgrade() {
	#
	# Capture the exit code here, and use that to determine if
	# upgrade verification was successful or not.
	#
	local rc="$?"

	if [[ "$rc" != "0" && "$DLPX_DEBUG" != "true" ]]; then
		#
		# On failure and when DLPX_DEBUG is not true, we clean
		# up the container previously created.
		#
		# Unlike in-place upgrades, the container is not cleaned
		# up on success; instead the container will have been
		# already stopped and converted to be used as the root
		# filesystem for the appliance after the next reboot.
		#
		cleanup_container
	fi

	return "$rc"
}

function upgrade_not_in_place() {
	trap cleanup_not_in_place_upgrade EXIT

	CONTAINER=$("$IMAGE_PATH/upgrade-container" create not-in-place)
	[[ -n "$CONTAINER" ]] || die "failed to create upgrade container"

	"$IMAGE_PATH/upgrade-container" start "$CONTAINER" ||
		die "failed to start upgrade '$CONTAINER'"

	"$IMAGE_PATH/upgrade-container" run "$CONTAINER" \
		"$IMAGE_PATH/execute" ||
		die "'$IMAGE_PATH/execute' failed in '$CONTAINER'"

	"$IMAGE_PATH/upgrade-container" run "$CONTAINER" \
		/bin/rm -f /etc/delphix-platform/ansible-done ||
		die "'rm -f /etc/delphix-platform/ansible-done' failed in '$CONTAINER'"

	"$IMAGE_PATH/upgrade-container" run "$CONTAINER" \
		/bin/systemctl start delphix-platform ||
		die "'systemctl start delphix-platform' failed in '$CONTAINER'"

	if [[ "$DLPX_UPGRADE_SKIP_VERIFY" != "true" ]]; then
		"$IMAGE_PATH/upgrade-container" run "$CONTAINER" \
			"$IMAGE_PATH/verify-impl" "$@" ||
			die "'$IMAGE_PATH/verify-impl' '$*' failed in '$CONTAINER'"
	fi

	"$IMAGE_PATH/upgrade-container" stop "$CONTAINER" ||
		die "failed to stop '$CONTAINER'"

	#
	# After this point, we no longer want to execute the normal
	# cleanup handler on any failure. The following command will
	# convert the container to be used as the next boot/root
	# filesystem, and thus the "stop" and "destroy" container logic
	# will no longer work. So, if the "convert-to-bootfs" script
	# fails, we'll need to manually rectify the situation.
	#
	trap - EXIT

	"$IMAGE_PATH/upgrade-container" convert-to-bootfs "$CONTAINER" ||
		die "failed to convert-to-bootfs '$CONTAINER'"
}

[[ "$EUID" -ne 0 ]] && die "must be run as root"

while getopts ':v' c; do
	case "$c" in
	v)
		DLPX_UPGRADE_SKIP_VERIFY="true"
		;;
	*)
		usage "invalid option -- '$c'"
		;;
	esac
done
shift $((OPTIND - 1))

case "$1" in
in-place)
	shift 1
	upgrade_in_place "$@"
	;;
not-in-place)
	shift 1
	upgrade_not_in_place "$@"
	;;
*)
	usage "invalid option -- '$1'"
	;;
esac
