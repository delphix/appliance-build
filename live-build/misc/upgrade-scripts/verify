#!/bin/bash
#
# Copyright 2018 Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

TOP="${BASH_SOURCE%/*}"
. "$TOP/common.sh"

UPGRADE_VERIFY_CONTAINER_LOG_DIR=/var/delphix/server/upgrade-verify

function usage() {
	echo "$(basename "$0"): $*" >&2
	echo "Usage: $(basename "$0") -v <version>"
	exit 2
}

function report_progress_inc() {
	echo "Progress increment: $(date +%T:%N%z), $1, $2"
}

function collect_logs() {
	verify_logs_dest="$DROPBOX_DIR/verify_logs"

	if [[ -d "$verify_logs_dest" ]]; then
		rm -rf "$verify_logs_dest"
	else
		mkdir "$verify_logs_dest"
	fi

	for log_dir in "$@"; do
		if [[ -d "$log_dir" ]]; then
			cp -r "$log_dir" "$verify_logs_dest"
		fi
	done

}

function cleanup() {
	#
	# Capture the exit code here, and use that to determine if
	# upgrade verification was successful or not.
	#
	local rc="$?"

	#
	# If the CONTAINER variable is empty, this means container
	# creation failed. In that case, the container creation process
	# will have already cleaned up after itself, and there's no
	# further cleanup for us to do here.
	#
	[[ -z "$CONTAINER" ]] && return

	#
	# Before cleaning the container, we need to copy logs to the
	# container's host for debugging purpose. Otherwise the logs will
	# be cleaned up as part of container deletion.
	#
	report_progress_inc 70 "Collecting verification logs"
	local logs_dirs_to_copy="$UPGRADE_VERIFY_CONTAINER_LOG_DIR"
	collect_logs $logs_dirs_to_copy

	#
	# On failure, and when DLPX_DEBUG is true, we avoid cleaning up
	# the verification container. This is intended to make it easier
	# to diagnose and debug verification failures on developer
	# machines.
	#
	if [[ $rc -ne 0 ]] && [[ -n "$DLPX_DEBUG" ]] && $DLPX_DEBUG; then
		report_progress_inc 80 "Skipping upgrade verification cleanup"
	else
		report_progress_inc 80 "Performing upgrade verification cleanup"

		"$TOP/verify-container" stop "$CONTAINER"
		"$TOP/verify-container" destroy "$CONTAINER"
	fi

	[[ $rc -eq 0 ]] &&
		report_progress_inc 100 "Upgrade verification was successful"
}

opt_d=false
while getopts ':df:l:o:v:' c; do
	case "$c" in
	v) DLPX_VERSION=$OPTARG ;;
	f | l | o) eval "opt_$c=$OPTARG" ;;
	d) eval "opt_$c=true" ;;
	*) usage "illegal option -- $OPTARG" ;;
	esac
done

[[ "$EUID" -ne 0 ]] && die "must be run as root"
[[ -n "$DLPX_VERSION" ]] || usage

trap cleanup EXIT

report_progress_inc 0 "Creating upgrade verification container"

CONTAINER=$("$TOP/verify-container" create)
[[ -n "$CONTAINER" ]] || die "failed to create verify container"

report_progress_inc 20 "Starting upgrade verification container"

"$TOP/verify-container" start "$CONTAINER" ||
	die "failed to start verify container '$CONTAINER'"

report_progress_inc 40 "Performing package upgrade verification"

systemd-run --machine="$CONTAINER" --quiet --pipe --wait -- \
	"$TOP/execute" "$DLPX_VERSION" ||
	die "'$TOP/execute' failed in verification container"

report_progress_inc 60 "Performing application upgrade verification"

if [[ -n "$DLPX_DEBUG" ]] && $DLPX_DEBUG; then
	VERIFY_DEBUG_OPT="-Ddelphix.debug=true"
fi

if $opt_d; then
	VERIFY_LIVE_MDS_OPT="-disableConsistentMdsZfsDataUtil"
fi

systemd-run --machine="$CONTAINER" --quiet --pipe --wait -- \
	/usr/bin/java \
	-Dlog.dir="$UPGRADE_VERIFY_CONTAINER_LOG_DIR" \
	-Dmdsverify=true \
	$VERIFY_DEBUG_OPT \
	-jar /opt/delphix/server/lib/exec/upgrade-verify/upgrade-verify.jar \
	-d "${opt_o:-$DROPBOX_DIR/upgrade_verify_report.json}" \
	-f "${opt_f:-1}" \
	-l "${opt_l:-en-US}" \
	-v "$DLPX_VERSION" \
	-pl 60 -ph 80 \
	$VERIFY_LIVE_MDS_OPT ||
	die "'upgrade-verify.jar' failed in verification container"

#
# This name is used by the "upgrade-verify.jar" just executed, so we
# cannot change this value without also modifying that JAR.
#
MDS_SNAPNAME="MDS-CLONE-upgradeverify"

systemd-run --machine="$CONTAINER" --quiet --pipe --wait -- \
	/opt/delphix/server/bin/dx_manage_pg stop -s "$MDS_SNAPNAME" ||
	die "failed to stop postgres"

systemd-run --machine="$CONTAINER" --quiet --pipe --wait -- \
	/opt/delphix/server/bin/dx_manage_pg cleanup -s "$MDS_SNAPNAME" ||
	die "failed to cleanup postgres"

#
# The cleanup logic will be run on EXIT, so rather than reporting 100
# percent here, we use the cleanup logic to do the final reporting.
#

exit 0
