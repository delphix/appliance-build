#
# Copyright 2018 Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

---
#
# When using the APPLIANCE_PASSWORD variable, we have to be careful to
# specify "no_log" to prevent it from being leaked to stdout (e.g. if
# ansible is run with verbosity).
#
- fail:
    msg: "Required environment variable 'APPLIANCE_PASSWORD' is empty."
  when: lookup('env', 'APPLIANCE_PASSWORD') == ''
  no_log: true

- fail:
    msg: "Required environment variable 'APPLIANCE_USERNAME' is empty."
  when: lookup('env', 'APPLIANCE_USERNAME') == ''

#
# Apt cache needs to be up to date.
#
- apt:
    update_cache: yes

#
# To adhere to the priciple of least surprise, we disable automatic
# upgrades here; this package can always be added on a specific system
# when it's desired.
#
- apt:
    name: unattended-upgrades
    state: absent
    purge: yes

#
# If we don't disable the "OS prober" script, when we update the grub
# configuration, it may find OS installations that we don't want. For
# example, when updating grub from within the chroot environment, it may
# find the OS installed on the build server's disks, since we bind mount
# the host's /dev directory into the chroot environment. By disabling
# the "OS prober" script, we avoid this issue.
#
- file:
    path: /etc/grub.d/30_os-prober
    mode: 0644
#
# We use a non-standard directory for the appliance user's home directory.
# As a result, we have to explicitly create the "base directory" here, rather
# than rely on cloud-init to create it; otherwise cloud init will fail
# to create the appliance user.
#
- file:
    path: /export/home
    state: directory
    mode: 0755

#
# The virtualization package uses the /etc/issue file to store a
# customer-supplied banner that is displayed prior to login. By
# default, there should be no banner, but due to the default /etc/issue
# file supplied on Ubuntu this is not the case. Thus, we need to remove
# this file to acheive our desired behavior.
#
- file:
    path: /etc/issue
    state: absent

#
# Override the nfs-mountd service execution parameters. By default, the
# service provides the --manage-gids flag so NFS will be aware of group
# membership for users in more than 16 groups. However, this flag has the
# undesirable side-effect of preventing users from accessing files owned by
# a group they are a member of, unless it's their primary group. As we do not
# have a great deal of control of our users' groups configuration, we have
# decided to disable the feature. Since Illumos users were already limited
# to 16 groups for NFS, this is not a change in behavior.
#
- file:
    path: /etc/systemd/system/nfs-mountd.service.d
    state: directory
    mode: 0755

- copy:
    dest: /etc/systemd/system/nfs-mountd.service.d/override.conf
    mode: 0644
    content: |
      [Service]
      ExecStart=
      ExecStart=/usr/sbin/rpc.mountd

#
# In order for networking to work on first boot, we must explicitly
# enable this service; it's unclear why it's not already enabled.
#
# Also, we can't use the "service" module, as that fails when running
# inside the chroot environment, so we have to use "command" here.
#
# Additionally, we raise the log level to help diagnose problems; in the
# event that networking fails, this additional information is valuable.
#
- command: systemctl enable systemd-networkd.service

- file:
    path: /etc/systemd/system/systemd-networkd.service.d
    state: directory
    mode: 0755

- copy:
    dest: /etc/systemd/system/systemd-networkd.service.d/50-log-level.conf
    mode: 0644
    content: |
      [Service]
      Environment=SYSTEMD_LOG_LEVEL=debug

#
# Similarly to systemd-networkd, we also raise the log level of
# systemd-resolved.service just in case we ever have to debug DNS
# issues.
#
- file:
    path: /etc/systemd/system/systemd-resolved.service.d
    state: directory
    mode: 0755

- copy:
    dest: /etc/systemd/system/systemd-resolved.service.d/50-log-level.conf
    mode: 0644
    content: |
      [Service]
      Environment=SYSTEMD_LOG_LEVEL=debug

#
# Configure GRUB2 to allow access over the serial console.
#
# Note: We disable IPv6 because it is not supported by the product.
# We do so here and not from systemd-sysctl as it seems like even
# though net.ipv6.conf.{default,all}.disable_ipv6 work for the
# currently installed network interfaces, new interfaces don't pick
# up those parameters.
#
- lineinfile:
    path: /etc/default/grub
    regexp: "^#?{{ item.key }}="
    line: "{{ item.key }}=\"{{ item.value }}\""
  with_items:
    - { key: 'GRUB_TERMINAL', value: 'console serial' }
    - { key: 'GRUB_CMDLINE_LINUX_DEFAULT',
        value: 'ipv6.disable=1 console=tty0 console=ttyS0,38400n8' }
    - { key: 'GRUB_SERIAL_COMMAND',
        value: 'serial --speed=38400 --unit=0 --word=8 --parity=no --stop=1' }

#
# Finally, we need to configure our appliance user, such that we actually
# have a way to log into the system after it boots.
#
- user:
    name: "{{ lookup('env', 'APPLIANCE_USERNAME') }}"
    group: staff
    groups: root
    shell: /bin/bash
    create_home: yes
    comment: Appliance User
    home: "/export/home/{{ lookup('env', 'APPLIANCE_USERNAME') }}"
    password:
      "{{ lookup('env', 'APPLIANCE_PASSWORD') | password_hash('sha512') }}"

#
# We also want the delphix user to have passwordless sudo access, so we
# must configure that here as well.
#
- copy:
    dest: /etc/sudoers.d/delphix
    mode: 0644
    content: 'delphix ALL=(ALL) NOPASSWD:ALL'

#
# When running in AWS, the hostname provided by the DHCP server might
# not be resovable from inside the instance. When this happens, it can
# cause issues when executing commands with "sudo". To workaround this
# issue, we explicitly ignore the hsotname supplied by the DHCP server.
#
- copy:
    dest: /etc/systemd/network/dhcp-client.network
    mode: 0644
    content: |
      [DHCP]
      UseHostname=false

#
# Further, the DHCP option we set above, to ignore the DHCP supplied
# hostname will only take affect if the /etc/hostname file does not
# contain the value "localhost"; which it does by default. Thus, to
# workaround this caveat, we have to change this file's contents.
#
- copy:
    dest: /etc/hostname
    mode: 0644
    content: appliance.example.com

- lineinfile:
    dest: /etc/environment
    regexp: '^{{ item.key }}='
    line: '{{ item.key }}="{{ item.value }}"'
  with_items:
    - { key: 'JAVA_HOME', value: '/usr/lib/jvm/oracle-java8-jdk-amd64' }

- locale_gen:
    name: "{{ item }}"
    state: present
  with_items:
    - en_US.UTF-8

- copy:
    dest: /etc/cloud/cloud.cfg.d/99-delphix-minimal.cfg
    mode: 0644
    content: |
      #
      # Without this setting, /etc/hosts will be empty. This allows cloud-init
      # to at least populate it with localhost settings.
      #
      manage_etc_hosts: true

      #
      # Since we're running on a ZFS-on-root installation, the "resizefs" and
      # "growpart" features of cloud init won't work; thus, we explicitly
      # disable them to help ensure they don't cause any harm.
      #
      resize_rootfs: false
      growpart:
        mode: off

      #
      # While we create the user using Ansible, we need to inform cloud-init
      # of this user so that SSH keys are properly inserted into this user's
      # authorized_keys file (e.g. when running in EC2). Additionally, this
      # will prevent cloud-init from creating the default user.
      #
      system_info:
        default_user:
          name: {{ lookup('env', 'APPLIANCE_USERNAME') }}
          lock_passwd: false

#
# In order for application processes to generate core dumps, we need to
# change the default Systemd core file setting, which would otherwise
# default to a soft limit of 0.
#
- file:
    path: /etc/systemd/system.conf.d
    state: directory
    mode: 0755

- copy:
    dest: /etc/systemd/system.conf.d/50-delphix.conf
    mode: 0644
    content: |
      [Manager]
      DefaultLimitCORE=infinity

#
# As for the priority prefix for our config file (see what that means
# in /etc/sysctl.d/README) we pick 50 which is higher than what other
# Ubuntu packages will be installing but less than customization made
# by the end-user, which in our case would be customer support.
#
- lineinfile:
    create: yes
    dest: /etc/sysctl.d/50-delphix.conf
    regexp: "^#?{{ item.key }}="
    line: "{{ item.key }}={{ item.value }}"
  with_items:
    #
    # We don't want to have our secondary addresses deleted when someone
    # deletes the primary IP address of a network interface, thus we
    # enable the promotion of secondary addresses to primary ones.
    #
    - { key: "net.ipv4.conf.all.promote_secondaries", value: "1" }
    - { key: "net.ipv4.conf.default.promote_secondaries", value: "1" }
    #
    # Application cores should be written into /var/crash and tagged with the
    # execname, process id, and seconds since the epoch.
    #
    - { key: 'kernel.core_pattern', value: '/var/crash/core.%e.%p.%t' }
    #
    # Force the kernel to allow memory allocations to succeed until we
    # actually run out of memory. The default heuristic can cause failure to
    # generate an hprof dump on OOM in the stack. Allowing overcommit lets the
    # fork(2) succeed despite not having enough memory which allows the script
    # that generates the hprof dump to run.
    #
    - { key: 'vm.overcommit_memory', value: '1' }
    #
    # Enable gathering of crash dumps by sending an NMI
    #
    - { key: 'kernel.unknown_nmi_panic', value: '1' }
    #
    # Enable the use of /proc/sysrq-trigger
    #
    - { key: 'kernel.sysrq', value: '1' }

#
# Create a world writeable directory for application and kernel core
# dumps. We want it world writeable because we're sharing one directory
# for corefiles from any user. Unlike illumos where all appliacation
# cores are written out as the root user, linux cores are written with
# the UID of the running process.
#
- file:
    path: /var/crash
    state: directory
    mode: 0777

#
# Configure command audit logging
#
# We want to record all commands executed on the appliance. Opt out for
# setsid since all ExecuteUtils.execute wrap each call with setsid.
#
# Note we can't use the "service" module, as that fails when running
# inside the chroot environment, so we enable auditd using "command".
#
- command: systemctl enable auditd.service

- lineinfile:
    dest: /etc/audit/auditd.conf
    regexp: "{{ item.regex }}"
    line: "{{ item.line }}"
  with_items:
    - { regex: "^num_logs =", line: "num_logs = 6" }
    - { regex: "^max_log_file =", line: "max_log_file = 3072" }
    - { regex: "^max_log_file_action =", line: "max_log_file_action = rotate" }
    - { regex: "^log_format =", line: "log_format = RAW" }

- blockinfile:
    path: /etc/audit/rules.d/audit.rules
    insertafter: EOF
    block: |
      ## Record all executed commands (excluding setsid)
      -a exit,never -S execve -F exe=/usr/bin/setsid
      -a exit,always -S execve

      ## Record command exit failures (execve result is not command result)
      -a exit,always -F a0!=0 -S exit_group
      -a exit,always -F a0!=0 -S exit

#
# By default, the ulimit for core files is set to 0, and the default
# filename and location for a core file is 'core' in the cwd. Update
# limits.conf to allow processes running as root or a regular user to
# make core files.
#
- lineinfile:
    create: yes
    dest: /etc/security/limits.conf
    line: "{{ item }} soft core unlimited"
  with_items:
    - 'root'
    - '*'

#
# Add the apt repos that have the debug versions of packages, so that we
# can download a debug kernel to use with crash.
#
- apt_repository:
    repo: "{{ item }}"
  with_items:
    - deb http://ddebs.ubuntu.com bionic main restricted universe multiverse
    - deb http://ddebs.ubuntu.com bionic-updates main restricted universe multiverse
    - deb http://ddebs.ubuntu.com bionic-proposed main restricted universe multiverse
  retries: 3
  delay: 30
  register: result
  until: result is succeeded

- shell: ls /boot/vmlinuz-* | sed 's|/boot/vmlinuz-||'
  register: kernel_version

- apt:
    name: 'linux-image-{{ item }}-dbgsym'
  with_items:
    - '{{ kernel_version.stdout_lines }}'
  retries: 3
  delay: 30
  register: result
  until: result is succeeded

#
# Increase the amount of memory reserved for the crash kernel.
# Empirically, it seems we need about 512M to get it to boot. If the
# system has less than 1G, disable crash dumps rather than reserving
# half of memory for the crash kernel.
#
- lineinfile:
    path: /etc/default/grub.d/kdump-tools.cfg
    regexp: '^GRUB_CMDLINE_LINUX_DEFAULT='
    line: 'GRUB_CMDLINE_LINUX_DEFAULT="$GRUB_CMDLINE_LINUX_DEFAULT crashkernel=1024M-:512M"'

- copy:
    dest: /etc/modprobe.d/10-zfs.conf
    mode: 0644
    content: |
      #
      # This file should not be directly modified by support, as these
      # changes would be removed on upgrade. In order to make custom
      # tunable changes for specific customer installations, please edit
      # the file (creating it if necessary): /etc/modprobe.d/20-zfs.conf
      #

      #
      # Panic on ZFS assertion failures; otherwise it's possible for these
      # assertion failures to only halt the thread that failed the assert,
      # which can then put the entire system into a "hung" state, since
      # we're running a rootfs on ZFS.
      #
      options spl spl_panic_halt=1

      #
      # We increase the max memory limit for ZFS channel programs to 512MB
      # to give us a wide buffer for development of channel programs. We
      # were using upwards of 70MB during internal testing, which is too
      # much with the default limit of 100MB.
      #
      options zfs zfs_lua_max_memlimit=536870912

      #
      # On Linux, SEEK_FILE and SEEK_HOLE are inaccurate if the file is
      # dirty; in which case, they say that there are no holes. To get the
      # same behavior as illumos, we need to configure this tunable.
      #
      options zfs zfs_dmu_offset_next_sync=1

      #
      # We require these settings to maintain parity with our illumos
      # based appliance w.r.t. read and write performance. We originally
      # tuned these values on our illumos based appliance due to reports
      # of poor performance on customers deployments, when using the
      # default values.
      #
      options zfs zfs_vdev_sync_read_min_active=35
      options zfs zfs_vdev_sync_read_max_active=35
      options zfs zfs_vdev_sync_write_min_active=35
      options zfs zfs_vdev_sync_write_max_active=35

      #
      # This setting is made to boost the performance ZFS replication,
      # by allowing more async reads to be inflight at any given time.
      #
      options zfs zfs_vdev_async_read_max_active=10

      #
      # The default value used for this tunable is configured such that
      # it factors in things like RAID-Z and dedup. DelphixOS does not
      # use RAID-Z or dedup, so we can optimize this value better for
      # our particular workload. The worst case is 3 copies in the DVAs,
      # and one extra copy for good luck (e.g. ganging).
      #
      options zfs spa_asize_inflation=4

      #
      # The following changes are made to match the values for these same
      # tunables, that we use on our illumos-based DelphixOS.
      #
      options zfs zfs_mg_noalloc_threshold=5

      #
      # Our data blocks are of size 8k, but the filesystems usually have a
      # recordsize of 128k. That causes incorrect size estimates in zfs
      # send. Overriding the property here fixes that.
      #
      options zfs zfs_override_estimate_recordsize=8192
  #
  # Because the spl module is loaded from the initramfs when using zfs on root,
  # we need to rebuild the initramfs to account for the modprobe.d change.
  #
  notify: update initramfs

- lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^#?{{ item.key }} "
    line: "{{ item.key }} {{ item.value }}"
  with_items:
    #
    # Configure SSH to allow PAM "conversations" (interactions with the user).
    #
    - { key: "ChallengeResponseAuthentication", value: "yes" }
    #
    # Harden the appliance by disabling ssh-agent(1), tcp, UNIX domain, and
    # X11 forwarding. Note that this doesn't improve security unless users are
    # also denied shell access.
    #
    - { key: "AllowAgentForwarding", value: "no" }
    - { key: "AllowStreamLocalForwarding", value: "no" }
    - { key: "AllowTcpForwarding", value: "no" }
    - { key: "X11Forwarding", value: "no" }

#
# Harden the appliance by disabling SFTP.
#
- replace:
    path: /etc/ssh/sshd_config
    regexp: '^(Subsystem.*sftp.*)'
    replace: '#\1'

#
# Enable SNMP client tools to load MIBs by default.
#
- replace:
    path: /etc/snmp/snmp.conf
    regexp: '^(mibs\s+:\s+)'
    replace: '#\1'

#
# Disable the Linux Azure Agent by default. Later this should be re-enabled on
# Azure systems.
#
- command: systemctl disable walinuxagent.service

#
# During upgrade verification (using the "verify" upgrade script), we'll
# use this "dropbox" directory to bind mount into the verification
# container, such that software running in that container can use this
# directory to communicate results of the verification back to the host.
#
# This path is also found in "common.sh" of the "upgrade-scripts", as
# well as other Delphix repositories. Thus, we need to be careful when
# changing this, as we may also need to update these other places where
# this path is referenced.
#
- file:
    path: /var/delphix/dropbox
    state: directory
    mode: 0755
    recurse: yes

#
# Install, but do not enable, the challenge-response PAM module for support
# logins with the 'delphix' user.
#
- apt:
    name: 'pam-challenge-response'
