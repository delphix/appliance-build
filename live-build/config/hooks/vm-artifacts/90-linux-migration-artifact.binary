#!/bin/bash -eux
#
# Copyright 2018 Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# This script is intended to be used as part of Delphix's build process.
# Its role is to convert the "binary" directory generated by live-build,
# into a cpio archive that will be wrapper in a tarball. That tarball is
# the migration artifact that illumos-based engines use to migrate to
# Linux.
#
MIGRATION_ARTIFACT="$ARTIFACT_NAME.migration.tar.gz"

#
# At the time of this writing dx_unpack.sh expects a tarball of the
# following structure:
#
# depot/                       the top level container
# depot/dx_prepare             top-level script to prepare the archive
#                              for upgrade
# depot/version.info           version and date information about the
#                              upgrade image
# depot/hashes                 the sha256sum of any upgrade artifacts
#                              (see below)
# depot/hashes.sig[.<release>] one cryptographic signature of depot/hashes
#                              per Delphix release
# depot/<upgrade artifacts>    generally cpio archives of OS and appliance
#
# As dx_upack.sh is the only piece of code that runs from the old
# world, we treat it as a contract that lists the bare minimum
# requirements for our artifact.
#
DEPOT_DIRECTORY=depot

#
# Delete any leftover files from previous runs.
#
rm -rf "$MIGRATION_ARTIFACT" "$DEPOT_DIRECTORY"

#
# Not all variants include the virtualization application (e.g.
# internal-minimal) so don't bother generating a migration image
# for those. /opt/delphix is always created as part of the
# appliance. Thus, checking if it exists is a quick way for us to
# distinguish between variants that have the appliance from
# the ones that don't.
#
if [[ ! -d binary/opt/delphix ]]; then
	echo "This artifact does not contain the appliance." \
		" Skipping migration image..."
	exit 0
fi

mkdir $DEPOT_DIRECTORY

#
# Generate archive for os root directory.
#
# Note: We temporarily change directory in the subshell (we move to the
# "binary" directory) because find prints everything as a relative
# path to the current directory and we don't want the generated archive
# to have "binary" as its top-level directory.
#
(
	cd binary
	find . -print | cpio -oc
) >$DEPOT_DIRECTORY/os-root.cpio

#
# Copy all migration scripts including dx_prepare which is needed by
# dx_unpack.
#
cp migration-scripts/* $DEPOT_DIRECTORY

#
# There may be a version.info file in the current directory already.
# That version.info is Linux-specific and does not necessarily have
# all the fields that the illumos upgrade process requires. Thus, we
# create our own special version info directly in the depot directory
# with all the fields expected by dx_unpack.
#
{
	#
	# Note that both the following field is bogus and supplied
	# solely for making dx_unpack happy.
	#
	echo "DLPX_OS_VERSION=Linux"

	#
	# UpgradeManager expects a valid date for DLPX_DATE.
	#
	echo "DLPX_DATE=$(date '+%Y.%m.%d.%H.%M.%S')"

	#
	# DLPX_MIN_VERSION is specified for ensuring that we are
	# migrating from the right version.
	#
	echo "DLPX_MIN_VERSION=5.3.0.0"

	#
	# DLPX_VERSION is set explicitly to match the version of the
	# virtualization appliance, which is what upgrades in Linux
	# do and therefore we try to stay consistent as this field
	# really can be anything (e.g. a date, a point-version, a
	# nickname, etc.)
	#
	# shellcheck disable=SC2016
	echo "DLPX_VERSION=$(chroot binary dpkg-query \
		-Wf '${Version}' delphix-virtualization)"
} >$DEPOT_DIRECTORY/version.info

#
# Generate hashes file.
#
(
	cd binary
	find . -type f -print0 | xargs -0 sha256sum
) >$DEPOT_DIRECTORY/os-root.hashes
(
	cd $DEPOT_DIRECTORY
	sha256sum ./* >hashes
)

#
# DELPHIX_SIGNATURE_TOKEN is used for signing our migration image.
# The signature is later unpacked and verified on the VM
# performing the migration. If DELPHIX_SIGNATURE_TOKEN has not been
# specified by the user when running this hook we skip generating
# the signature for this image. Similarly for DELPHIX_SIGNATURE_URL.
#
if [[ -n "${DELPHIX_SIGNATURE_TOKEN:-}" ]] && [[ -n "${DELPHIX_SIGNATURE_URL:-}" ]]; then
	#
	# Generate depot/hashes.sig[.<release>]
	#
	# Assumption: we always migrate from version 5.3
	#
	VERSION="5.3"
	SIGN_URL="$DELPHIX_SIGNATURE_URL/upgrade/keyVersion/$VERSION/sign"
	(
		cd $DEPOT_DIRECTORY

		# Encode payload for signature request
		base64 -w 0 hashes >hashes64
		echo "{\"data\": \"$(cat hashes64)\"}" >hashes64.payload

		# Request signature
		curl -s -S -f -H "Content-Type: application/json" \
			-u "$DELPHIX_SIGNATURE_TOKEN" "$SIGN_URL" -d @hashes64.payload >hashes.response

		# Decode generated signature
		jq -r .signature <hashes.response >sig.encoded
		base64 -d sig.encoded >hashes.sig.$VERSION

		# Remove intermediate files
		rm hashes64 hashes64.payload hashes.response sig.encoded
	)
fi

#
# Tape-ARchive & Compress Zee File!
#
# We enable verbose output in the hope that all the files that are part of
# the artifact are logged somewhere which could aid debugging in the future.
#
tar -cvf - $DEPOT_DIRECTORY | pigz >"$MIGRATION_ARTIFACT"
