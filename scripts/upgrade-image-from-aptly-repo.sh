#!/bin/bash -x
#
# Copyright 2018-2020 Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# This script is responsible for generating a Delphix appliance upgrade
# image, by consuming a previously generated Aptly/APT repository. This
# APT repository is the primary component of any upgrade image, and it
# must contain a version of the delphix-entire package for each platform
# supported, as well as all package dependencies.
#
# The Aptly repository will generally be created prior to calling this
# script, by using the "aptly-repo-from-debs.sh" script.
#

. "${BASH_SOURCE%/*}/common.sh"

function usage() {
	echo "$(basename "$0"): $*" >&2
	echo "Usage: $(basename "$0") <name>"
	exit 2
}

function cleanup() {
	[[ -n "$DIR" ]] && [[ -d "$DIR" ]] && rm -rf "$DIR"
}

trap cleanup EXIT

[[ -n "$TOP" ]] || die "must be run inside of the git repository"
[[ $# -gt 1 ]] && usage "too many arguments specified"
[[ $# -lt 1 ]] && usage "too few arguments specified"

#
# One of the "inputs" to this script is an Aptly repository stored in
# the "~/.aptly/public" directory. Thus, we do minimal verification of
# this input, and see if the directory exists before proceeding. The
# intention is for this directory to have been previously generated by
# another part of the build system; e.g. via "aptly-repo-from-debs.sh".
#
[[ -d ~/.aptly/public ]] || die "aptly repository not found"

DIR=$(mktemp -d -t upgrade-image-from-aptly-repo.XXXXXXX)
[[ -d "$DIR" ]] || die "unable to create temporary directory"
pushd "$DIR" &>/dev/null || die "'pushd $DIR' failed"

#
# Generate the "payload" of the upgrade image, which will contain the
# upgrade scripts, as well as the Aptly/APT repository. We generate this
# "payload" tarball as a way to limit the number of files that we need
# to checksum and store in "upgrade image" tarball itself. Rather than
# the "upgrade image" tarball containing all of the files for the upgrade
# scripts and APT repository, it'll only contain the "payload.tar.gz"
# file, and a few other miscellaneous metadata files.
#
# We need to limit the files contained in the 'upgrade image" tarball
# because the signing service that we use to sign the SHA256SUMS file
# below, has a relatively small limit on the size of the file that we
# can sign with it. Thus, we need the contents of the SHA256SUMS file to
# be relatively small (and that file's size grows linearly with the
# number of files contained in the "upgrade image" tarball).
#
tar -I pigz -cf "payload.tar.gz" \
	-C "$TOP/upgrade/upgrade-scripts" . \
	-C ~/.aptly/public . ||
	die "failed to generate payload.tar.gz"

cp "$TOP/upgrade/version.info.template" version.info ||
	die "failed to copy version.info.template"

VERSION=$(dpkg -f "$(find ~/.aptly/public -type f -name 'delphix-entire-*' | head -n 1)" version)
[[ -n "$VERSION" ]] || die "failed to determine delphix-entire version"
sed -i "s/@@VERSION@@/$VERSION/" version.info ||
	die "failed to set VERSION in version.info file"

#
# The DELPHIX_HOTFIX_VERSION variable is optional, and thus it may not
# be set at this point. That is by design, and when that's the case, we
# still need to do this replacement, such that the version information
# file properly reflects an empty value for the hotfix version.
#
sed -i "s/@@HOTFIX@@/$DELPHIX_HOTFIX_VERSION/" version.info ||
	die "failed to set HOTFIX in version.info file"

#
# On 6.0 versions, the virtualization application expects to find the
# "verification-version.info" file within the unpacked upgrade image
# directory. Thus, to satisfy those requirements, we must provide that
# file, in addition to the usual "version.info".
#
cp "$TOP/upgrade/verification-version.info.template" verification-version.info ||
	die "failed to copy verifiction-version.info.template"

VERIFICATION_VERSION=$(dpkg -f "$(find ~/.aptly/public -type f -name 'delphix-upgrade-verification*.deb' | head -n 1)" version)
[[ -n "$VERIFICATION_VERSION" ]] || die "failed to determine verification version"
sed -i "s/@@VERIFICATION_VERSION@@/$VERIFICATION_VERSION/" verification-version.info ||
	die "failed to set VERIFICATION_VERSION in verification-version.info file"
sed -i "s/@@VERIFICATION_VERSION@@/$VERIFICATION_VERSION/" version.info ||
	die "failed to set VERIFICATION_VERSION in version.info file"

#
# If we're running the build manually, and these variables are not
# already set in the environment, we use an arbitrarily low value to
# allow upgrading to the produced upgrade image from any version.
#

if [[ -n "$DELPHIX_UPGRADE_MINIMUM_VERSION" ]]; then
	sed -i \
		"s/@@MINIMUM_VERSION@@/$DELPHIX_UPGRADE_MINIMUM_VERSION/" \
		version.info ||
		die "failed to set MINIMUM_VERSION in version.info"
elif [[ -n "$JENKINS_URL" ]]; then
	die "DELPHIX_UPGRADE_MINIMUM_VERSION not specified"
else
	sed -i "s/@@MINIMUM_VERSION@@/0.0.0.0/" version.info ||
		die "failed to set MINIMUM_VERSION in version.info"
fi

if [[ -n "$DELPHIX_UPGRADE_MINIMUM_REBOOT_OPTIONAL_VERSION" ]]; then
	sed -i \
		"s/@@MINIMUM_REBOOT_OPTIONAL_VERSION@@/$DELPHIX_UPGRADE_MINIMUM_REBOOT_OPTIONAL_VERSION/" \
		version.info ||
		die "failed to set MINIMUM_REBOOT_OPTIONAL_VERSION in version.info"
elif [[ -n "$JENKINS_URL" ]]; then
	die "DELPHIX_UPGRADE_MINIMUM_REBOOT_OPTIONAL_VERSION not specified"
else
	sed -i "s/@@MINIMUM_REBOOT_OPTIONAL_VERSION@@/0.0.0.0/" version.info ||
		die "failed to set MINIMUM_REBOOT_OPTIONAL_VERSION in version.info"
fi

cp "$TOP/upgrade/prepare" prepare || die "failed to copy prepare"

sha256sum payload.tar.gz version.info verification-version.info prepare >SHA256SUMS ||
	die "failed to generate SHA256SUMS file"

#
# As a precaution, we disable "xtrace" so that we avoid exposing the
# DELPHIX_SIGNATURE_TOKEN environment variable contents to stdout.
#
set +o xtrace
if [[ -n "$JENKINS_URL" ]]; then
	[[ -n "$DELPHIX_SIGNATURE_VERSIONS" ]] || die "DELPHIX_SIGNATURE_VERSIONS not specified"
	[[ -n "$DELPHIX_SIGNATURE_TOKEN" ]] || die "DELPHIX_SIGNATURE_TOKEN not specified"
	[[ -n "$DELPHIX_SIGNATURE_URL" ]] || die "DELPHIX_SIGNATURE_URL not specified"
fi

if [[ -n "${DELPHIX_SIGNATURE_TOKEN:-}" ]] && [[ -n "${DELPHIX_SIGNATURE_URL:-}" ]]; then
	echo "{\"data\": \"$(base64 -w 0 SHA256SUMS)\"}" >sign-request.payload ||
		die "failed to generate sigh-request.payload file"

	#
	# Here, we need to generate signature files for all of the appliance
	# versions that'll be allowed to upgrade from, using this upgrade
	# image. We rely on the user of this script to pass in this list
	# of versions; generally this will be some Jenkins automation.
	#
	for signature_version in $DELPHIX_SIGNATURE_VERSIONS; do
		curl -s -S -f -H "Content-Type: application/json" \
			-u "$DELPHIX_SIGNATURE_TOKEN" -d @sign-request.payload \
			"$DELPHIX_SIGNATURE_URL/upgrade/keyVersion/${signature_version}/sign" \
			>sign-request.response ||
			die "failed to generate sign-request.response file"

		jq -r .signature <sign-request.response >signature.base64 ||
			die "failed to generate signature.base64 file"
		base64 -d signature.base64 >"SHA256SUMS.sig.${signature_version}" ||
			die "failed to decode signature.base64 file"

		rm sign-request.response signature.base64 ||
			die "failed to remove temporary signature files"
	done
fi
set -o xtrace

# shellcheck disable=SC2046
tar -cf "$1.upgrade.tar" \
	$(ls SHA256SUMS.sig.* 2>/dev/null) \
	SHA256SUMS \
	version.info \
	verification-version.info \
	prepare \
	payload.tar.gz ||
	die "failed to generate upgrade image"

mkdir -p "$TOP/build/artifacts" ||
	die "failed to create build artifacts directory"

mv "$1.upgrade.tar" "$TOP/build/artifacts" ||
	die "failed to move upgrade image to build artifacts directory"
